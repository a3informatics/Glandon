var formDefinition ;
var rootNode;
var bcCurrent;
var bcCurrentRow;
var notepadTableReload;
var norepadTable;
var notepadData;
var notepadRow;
var varClCurrent;
var varClCurrentRow;
var questionDatatypeValue
var markdownElement;
var markdownType;
var previousSave;
var bcSelect;

$(document).ready(function() {

  $("#saving").prop("disabled", true);
  
  // Set up the form validation
  validatorDefaults ();
  $('#main_form').validate({
    rules: {
        "Form Identifier": {required: true, identifier: true },
        "Form Label": {required: true, label: true },
        "Form Note": {required: false, markdown: true},
        "Form Completion": {required: false, markdown: true},
        "Group Label": {required: true, label: true },
        "Group Note": {required: false, markdown: true},
        "Group Completion": {required: false, markdown: true},
        "Question Label": {required: true, label: true },
        "Question Text": {required: true, question: true },
        "Question Note": {required: false, markdown: true},
        "Question Completion": {required: false, markdown: true},
        "Placeholder Text": {required: false, markdown: true},
        "Label Text Label": {required: true, label: true},
        "Label Text Text": {required: false, markdown: true},
        "Code List Label": {required: true, label: true },
        "Common Label": {required: true, label: true }
    },
    submitHandler: function(form) {
      saveRest();
      return false;
    },
    invalidHandler: function(event, validator) {
      displayWarning("The form is not valid. Please correct the errors.");
    }
  });

  questionClTable = $('#questionClTable').DataTable({
    "searching": false,
    "pageLength": 5,
    "lengthChange": false,
    "columns": [
      {"data" : "identifier", "width" : "50%"},
      {"data" : "useful_1", "width" : "50%"},
    ]
  });
  questionClTable.clear();

  bcSelect = $('#bcTable').DataTable( {
    "ajax": {
      "url": "/biomedical_concepts/list",
      "dataSrc": "data",
      error: function (xhr, status, error) {
        displayError("An error has occurred loading the Biomedical Concepts table.");
      }
    },
    dataType: 'json',
    "pageLength": 5,
    "lengthMenu": [[5, 10, 25, 50], [5, 10, 25, 50]],
    "pagingType": "full",
    "bProcessing": true,
    "language": {
      "infoFiltered": "",
      "processing": "<img src='<%= asset_path('processing.gif') %>'>"
    },
    "columns": [
      {"data" : "identifier", "width" : "50%"},
      {"data" : "label", "width" : "50%"}
    ]
  });

  function initialNotepadLoad () {
    notepadTable = $('#notepad_table').DataTable( {
      "ajax": {
        "url": "/notepads/index_term",
        "dataSrc": "data"  
      },
      "bProcessing": true,
      "bInfo" : false,
      "searching": false,
      "pageLength": 5,
      "lengthMenu": [[5, 10, 15, 20, 25], [5, 10, 15, 20, 25]],
      "language": {
             "processing": "<img src='<%= asset_path('processing.gif') %>'>"
        },
      "columns": [
        {"data" : "identifier", "width" : "30%"},
        {"data" : "useful_1", "width" : "70%"}
      ]
    });
    notepadTableReload = true;    
  }

  $('#notepad_refresh').click(function() {
    if (!notepadTableReload) {
      initialNotepadLoad();
    } else {
      notepadTable.ajax.reload();
    }
  });

  $('#notepad_add').click(function() {
    var data;
    var text;
    if (notepadRow != null) {
      data = notepadTable.row(notepadRow).data();
      questionClTable.row.add(data);
      questionClTable.draw(false);
    }
  });

  $('#notepad_table tbody').on('click', 'tr', function () {
    var row = notepadTable.row(this).index();
    var data = notepadTable.row(row).data();
    if (notepadRow != null) {
      $(notepadRow).toggleClass('success');
    }
    $(this).toggleClass('success')
    notepadData = data;
    notepadRow = this
  });

  // Initialise everything.
  initData();
  initialNotepadLoad();
  selectForm();
  displayForm(rootNode);
  d3eDisplayTree(1);

  /*
  * General Panel Actions
  */
  $('#close').click(function() {
    saveNode();
    saveRest();
    keepToken = true;
    window.location.href = $('#close_path').val();
  });

  // Function for testing. Allows a tree node to be clicked.
  $('#click_node').click(function() {
    var nodeName = $('#click_node_text').val();
    var node = d3FindGRefByName(nodeName);
    simulateClick(node);
  });

  $('#test').click(function() {
    var ordinal = getOrdinal($('#click_node_text').val());
    $('#test_text').val(ordinal)
  });

  /*
  * Button class actions
  */
  $('.node-up-action').click(function() {
    treeNodeUp();
  }); 

  $('.node-down-action').click(function() {
    treeNodeDown();
  });

  $('.node-delete-action').click(function() {
    treeNodeDelete();
  });

  /*
  * Form Panel Actions
  */
  $('#formAddGroup').click(function() {
    currentNode = d3eGetCurrent()
    if (currentNode === null) {
      displayWarning("You need to select the form node.");
    } else {
      saveForm(currentNode);
      var node = addGroup(currentNode);
      displayNode(node);
      //d3eDisplayTree(node.key);  
    }
  });

  /*
  * Group Panel Actions
  */
  $('#groupAddGroup').click(function() {
    treeNodeAdd(addGroup);
  });

  $('#groupDelete').click(function() {
    treeNodeDelete();
  });

  $('#groupAddCommon').click(function() {
    if (d3eGetCurrent() == null) {
      displayWarning("You need to select a group node.");
    } else if (hasCommonGroup(d3eGetCurrent())) {
      displayWarning("Group already has a common node.");
    } else {
      var node = addCommon();
      displayNode(node);
      //d3eDisplayTree(node.key);
    }
  }); 

  $('#groupAddBc').click(function() {
    if (d3eGetCurrent() == null) {
      displayWarning("You need to select a group node.");
    } else if (bcCurrent ==  null) {
      displayWarning("You need to select a Biomedical Concept.");
    } else {
      addBc();
    }
  }); 

  $('#groupAddQuestion').click(function() {
    treeNodeAdd(addQuestion);
  }); 

  $('#groupAddMapping').click(function() {
    treeNodeAdd(addMapping);
  }); 

  $('#groupAddPlaceholder').click(function() {
    treeNodeAdd(addPlaceholder);
  }); 

  $('#groupAddLabelText').click(function() {
    treeNodeAdd(addLabelText);
  }); 

  /*
  * BC Panel Actions
  */
  $('#bcDelete').click(function() {
    treeNodeDelete();
  });

  /*
  * Item Panel Actions
  */
  $('#itemCommon').click(function() {
    if (d3eGetCurrent() == null) {
      displayWarning("You need to select an item node.");
    } else {
      makeCommon(d3eGetCurrent());
    }
  }); 

  $('#itemRestore').click(function() {
    if (d3eGetCurrent() == null) {
      displayWarning("You need to select an item node.");
    } else {
      restoreCommon(d3eGetCurrent());
    }
  }); 

  /*
  * Code List Panel Actions
  */
  $('#clDefault').click(function() {
    if (d3eGetCurrent() == null) {
      displayWarning("You need to select a code list node.");
    } else {
      clLabelElement.value = d3eGetCurrent().data.subject_data.label;
    }
  });
  
  $('#clUp').click(function() {
    treeNodeUp();
  }); 

  $('#clDown').click(function() {
    treeNodeDown();
  }); 

  /*
   * Function to handle click on the BC selection table.
   */
  $('#bcTable tbody').on('click', 'tr', function () {
    handleBCTable(bcSelect, this);
  });

  /*
   * Function to handle click on question cl table
   */
  $('#questionClTable tbody').on('click', 'tr', function () {
    handleQuestionTable(questionClTable, this);
  });

  /* 
  * Function to handle the terminology button clicks.
  */
  $('#deleteTerm').click(function() {
    var data;
    if (varClCurrentRow == null) {
      displayWarning("You need to select a code list item.");
    } else {
      questionClTable.row(varClCurrentRow).remove();
      varClCurrentRow = null;
      questionClTable.draw();
    }
  });

  $('#questionDatatype input:radio').click(function() {
    var value = $(this).val();
    clEnableDisable(value);
    clFormat(value);
    questionDatatypeValue = value;
  });

  /*
  * Functions to handle completion instructions
  */
  $('#markdown_preview').click(function() {
    if (markdownElement == null) {
      displayWarning("You need to select a completion instruction field.");
    } else {
      var text = markdownElement.value;
      getMarkdown(document.getElementById("genericCompletion"), text, markdownCallback);  
    }
  });

  $('#markdown_hide').click(function() {
    hideCi();
    if (markdownType == C_NORMAL_GROUP) {
      showBCSelection();
    } else if (markdownType == C_QUESTION) {
      showNotepad();    
    }
    markdownElement = null;
    markdownType = "";
  });

  $( "#formCompletion" ).focus(function() {
    handleFocus(C_FORM, document.getElementById("formCompletion"));
  });

  $( "#formNote" ).focus(function() {
    handleFocus(C_FORM,  document.getElementById("formNote"));
  });

  $( "#groupCompletion" ).focus(function() {
    hideBCSelection();
    handleFocus(C_NORMAL_GROUP, document.getElementById("groupCompletion"));
  });

  $( "#groupNote" ).focus(function() {
    hideBCSelection();
    handleFocus(C_NORMAL_GROUP, document.getElementById("groupNote"));
  });

  $( "#questionCompletion" ).focus(function() {
    hideNotepad();
    handleFocus(C_QUESTION, document.getElementById("questionCompletion"));
  });

  $( "#questionNote" ).focus(function() {
    hideNotepad();
    handleFocus(C_QUESTION, document.getElementById("questionNote"));
  });

  $( "#placeholderText" ).focus(function() {
    handleFocus(C_PLACEHOLDER, document.getElementById("placeholderText"));
  });

  $( "#labelTextText" ).focus(function() {
    handleFocus(C_TEXTLABEL, document.getElementById("labelTextText"));
  });

});

/*
* Utilty Functions
* ================
*/

function handleFocus(type, element) {
  showCi();
  markdownType = type;
  markdownElement = element;
  getMarkdown(element, element.value, markdownCallback);
}

function markdownCallback(element, text) {
  element.innerHTML = text;
}

/*
*
*/
function clEnableDisable (value) {
  if (value == "I" || value == "S" || value == "F") {
    $("#questionFormat").prop('disabled', false);
    $("#notepad_add").prop('disabled', true);
    $("#deleteTerm").prop('disabled', true);
  } else {
    $("#questionFormat").prop('disabled', true);
    $("#notepad_add").prop('disabled', false);
    $("#deleteTerm").prop('disabled', false);
  }
}

function clFormat (value) {
  if (value == "I") {
    questionFormatElement.value = "3"
  } else if (value == "S") {
    questionFormatElement.value = "20"
  } else if (value == "F") {
    questionFormatElement.value = "6.2"
  } else {
    questionFormatElement.value = ""
  }
}

function selectForm() {
  clearSelect();
  $("#formInfo").removeClass('hidden');
}

function selectGroup() {
  clearSelect();
  $("#groupInfo").removeClass('hidden');
  $("#bcSelection").removeClass('hidden');
}

function selectBC() {
  clearSelect();
  $("#bcInfo").removeClass('hidden');
}

function showBCSelection() {
  $("#bcSelection").removeClass('hidden');
}

function hideBCSelection() {
  $("#bcSelection").addClass('hidden');
}

function selectCommon() {
  clearSelect();
  $("#commonInfo").removeClass('hidden');
}

function selectItem() {
  clearSelect();
  $("#itemInfo").removeClass('hidden');
}

function selectQuestion() {
  clearSelect();
  $("#questionInfo").removeClass('hidden');
  $("#notepad_panel").removeClass('hidden');
}

function selectMapping() {
  clearSelect();
  $("#mappingInfo").removeClass('hidden');
}

function selectPlaceholder() {
  clearSelect();
  $("#placeholderInfo").removeClass('hidden');
  $("#markdown_panel").removeClass('hidden');
}

function selectLabelText() {
  clearSelect();
  $("#labelTextInfo").removeClass('hidden');
  $("#markdown_panel").removeClass('hidden');
}

function selectCl() {
  clearSelect();
  $("#clInfo").removeClass('hidden');
}

function showNotepad() {
  $("#notepad_panel").removeClass('hidden');
}

function hideNotepad() {
  $("#notepad_panel").addClass('hidden');
}

function showCi() {
  $("#markdown_panel").removeClass('hidden');
}

function hideCi() {
  $("#markdown_panel").addClass('hidden');
}

function clearSelect() {
  $('.panel').addClass('hidden');
  $("#general_panel").removeClass('hidden');
}

function removeSpinner() {
  $("#saving > span").removeClass('glyphicon-spin');
}

function addSpinner() {
  $("#saving > span").addClass('glyphicon-spin');
}

// Function for page unload. Nothing to do
function pageUnloadAction() {
  saveNode();
  saveRest();
}

function saveRest() {
  var uri;
  var method;
  var data;
  var action;
  var form;
  var currentSave = JSON.stringify(formDefinition);
  if (currentSave !== previousSave) {
    addSpinner();
    form = formDefinition.managed_item;
    data = { "namespace": form['namespace'], "form": formDefinition };  
    $.ajax({
      url: "/forms/" + form['id'],
      type: 'PUT',
      data: JSON.stringify(data),
      dataType: 'json',
      contentType: 'application/json',
      success: function(result){
        //displaySuccess("Form has been saved.");
        removeSpinner();
      },
      error: function(xhr, status, error){
        handleAjaxError (xhr, status, error);
        removeSpinner();
      }
    });
    previousSave = currentSave;
  } 
}

/*
* Generic functions
*/
function treeNodeAdd(addFunction) {
  if (d3eGetCurrent() == null) {
    displayWarning("You need to select a node.");
  } else {
    saveNode();
    node = addFunction(d3eGetCurrent());
    displayNode(node);
  }
}

function treeNodeDelete(checkChildren = false) {
  if (d3eGetCurrent() == null) {
    displayWarning("You need to select a node.");
  } else {
    if (checkChildren && hasChildren(d3eGetCurrent())) {
      displayWarning("You need to remove the child nodes.");
    } else {
      var node = d3eDeleteNode(d3eGetCurrent());
      displayNode(node);
    } 
  }
}

function treeNodeUp() {
  if (d3eGetCurrent() == null) {
    displayWarning("You need to select a node.");
  } else {
    var currentNode = d3eGetCurrent();
    var parentNode = currentNode.parent;
    if (d3eGetCurrent().index != 0) {
      d3eMoveNodeUp(currentNode);
      displayNode(currentNode);
    } else {
      displayWarning("You cannot move the node up.");
    }
  }
}

function treeNodeDown() {
  if (d3eGetCurrent() == null) {
    displayWarning("You need to select a node.");
  } else {
    var parentNode = currentNode.parent;
    if (currentNode.index < parentNode.save.length) {
      d3eMoveNodeDown(currentNode);
      displayNode(currentNode);
    } else {
      displayWarning("You cannot move the node down.");
    }
  }
}

/*
 * Functions to display the various panels. 
 */
function displayForm(node) {
  $('#formLabel').val(node.data.label);
  $('#formCompletion').val(node.data.completion);
  $('#formNote').val(node.data.note);
  $("#formIdentifier").prop( "disabled", true );
}

function displayGroup(node) {
  $('#groupLabel').val(node.data.label);
  $('#groupCompletion').val(node.data.completion);
  $('#groupNote').val(node.data.note);
  $( "#groupRepeating").prop('checked', node.data.repeating);
  $( "#groupOptional").prop('checked', node.data.optional);
}

function displayBC(node) {
  $('#bcIdentifier').val(node.data.label);
  $('#bcLabel').val(node.data.label);
}

function displayCommon(node) {
  $('#commonLabel').val(node.data.label);
}

function displayItem(node) {
  var parentNode;
  var itemEnableElement = document.getElementById("itemEnable");
  var itemOptionalElement = document.getElementById("itemOptional");
  $('#itemLabel').val(node.data.label);
  parentNode = node.parent;
  if (isCommon(parentNode)) {
    $("#itemEnable").prop('disabled', true);
    $("#itemOptional").prop('disabled', true);
    $("#itemUpdate").prop('disabled', true);
    $("#itemCommon").prop('disabled', true);
    $("#itemRestore").prop('disabled', false);
  } else {
    $("#itemEnable").prop('disabled', false);
    $("#itemOptional").prop('disabled', false);
    $("#itemUpdate").prop('disabled', false);
    $("#itemCommon").prop('disabled', false);
    $("#itemRestore").prop('disabled', true);
    $("#itemEnable").prop('checked', node.data.enabled);
    $("#itemOptional").prop('checked', node.data.optional);
  }
}

function displayQuestion(node) {
  $('#questionLabel').val(node.data.label);
  $('#questionText').val(node.data.question_text);
  $("#questionOptional").prop('checked', node.data.optional);
  $('#questionMapping').val(node.data.mapping);
  var $radios = $('input:radio[name=dtRadio]');
  $radios.filter('[value=' + node.data.datatype +']').prop('checked', true);
  $('#questionFormat').val(node.data.format);
  $('#questionComplation').val(node.data.completion);
  $('#questionNote').val(node.data.note);
  questionClTable.clear();
  if (node.hasOwnProperty('children')) {
    for (j=0; j<node.children.length; j++) {
      var child = node.children[j];
      var data = child.data
      var ref = data.subject_data;
      var clRow = {identifier: ref.identifier, uri_id: ref.id, uri_ns: ref.namespace, useful_1: ref.notation, useful_2: ref.label}; 
      questionClTable.row.add(clRow);
    }
  }
  clEnableDisable(node.data.datatype);
}

function displayMapping(node) {
  $('#mappingMapping').val(node.data.mapping);
}

function displayPlaceholder(node) {
  $('#plText').val(node.data.free_text);
}

function displayLabelText(node) {
  $('#labelTextLabel').val(node.data.label);
  $('#labelTextText').val(node.data.label_text);
}

function displayCl(node) {
  var clEnableElement = document.getElementById("clEnable");
  var clOptionalElement = document.getElementById("clOptional");
  $('#clIdentifier').html(node.data.subject_data.identifier);
  $('#clLabel').val(node.data.local_label);
  $('#clDefaultLabel').html(node.data.subject_data.label);
  $('#clNotation').html(node.data.subject_data.notation);
  $("#clEnable").prop('checked', node.data.enabled);
  $("#clOptional").prop('checked', node.data.optional);
  parentNode = node.parent;
  if (parentNode.type == C_QUESTION) {
    $("#clLocalLabel").prop('disabled', false);
    $("#clEnable").prop('disabled', true);
  } else {
    $("#clLocalLabel").prop('disabled', true);
    $("#clEnable").prop('disabled', false);
  }
}

/**
 * Functions to save info.
 */
function saveForm(node) {
  node.data.label = $('#formLabel').val();
  node.data.completion = $('#formCompletion').val();
  node.data.note = $('#formNote').val();
  node.name = node.data.label;
}

function saveGroup(node) {
  node.data.label = $('#groupLabel').val();
  node.data.completion = $('#groupCompletion').val();
  node.data.note = $('#groupNote').val();
  node.name = node.data.label;
  node.data.repeating = $('#groupRepeating').is(":checked");
  node.data.optional = $('#groupOptional').is(":checked");
}

function saveCommon(node) {
  //node.data.identifier = commonIdentifierElement.value;
  node.data.label = $('#commonLabel').val();
  node.name = node.data.label;
}

function saveItem(node) {
  node.data.enabled = $('#itemEnable').is(":checked");
  node.data.optional = $('#clOptional').is(":checked");
  node.enabled = itemEnableElement.checked;
}

function saveQuestion(node) {
  var rowData;
  var i;
  var row;
  var tcRefSNode;
  var tcRefD3Node;
  node.data.label = $('#questionLabel').val();
  node.name = node.data.label;
  node.data.question_text = $('#questionText').val();
  node.data.optional = $('#questionOptional').is(":checked");
  node.data.mapping = $('#questionMapping').val();
  node.data.datatype = $('input:radio[name=dtRadio]:checked').val();
  node.data.format = $('#questionFormat').val();
  node.data.completion = $('#questionCompletion').val();
  node.data.note = $('#questionNote').val();
  node.data.children = [];
  node.save = [];
  node.children = [];
  rowData = questionClTable.rows().data();
  for (i=0; i<rowData.length; i++) {
    row = rowData.row(i).data();
    tcRefSNode = newQuestionCli(row);
    tcRefD3Node = d3eAddNode(node, row.useful_2, C_Q_CL, true, tcRefSNode, true); 
    addSNode(node.data, tcRefSNode, true);
    tcReference(tcRefD3Node);
  }
}

function saveMapping(node) {
  node.data.mapping = $('#mappingMapping').val();
}

function savePlaceholder(node) {
  node.data.free_text = $('#placeholderText').val();
}

function saveLabelText(node) {
  node.data.label = $('#labelTextLabel').val();
  node.data.label_text = $('#labelTextText').val();
  node.name = node.data.label;
}

function saveCl(node) {
  node.data.enabled = $('#clEnable').is(":checked");
  node.data.optional = $('#clOptional').is(":checked");
  node.data.local_label = $('#clLabel').val();
  node.name = node.data.local_label;
  node.enabled = clEnableElement.checked;
}

function makeCommon(node) {
  var child;
  var item;
  var commonGroup;
  var otherNodes = [];
  var otherSourceNodes = [];
  var bcParent = node.parent;
  var groupParent = bcParent.parent;
  var sourceNode;
  if (bcParent != null && groupParent != null) {
    for (var i=0; i<groupParent.save.length; i++) {
      child = groupParent.save[i];
      if (child.type == C_COMMON_GROUP) {
        commonGroup = child;
      } else {
        for (var j=0; j<child.save.length; j++) {
          item = child.save[j];
          if ('bridgPath' in item.data) {
            if (node.key == item.key) {
              // Same node, ignore.
            } else if (node.data.bridgPath == item.data.bridgPath) {
              // Push to node for later
              otherNodes.push(item);
              otherSourceNodes.push(item.data);
            }
          }
        }
      }
    }

    // Node refers to the selected node, otherNodes all the nodes of
    // the same type within the BCs at the same level within parent group
    if (commonGroup != null) {
      sourceNode = node.data;

      node.otherCommon = [];
      sourceNode.otherCommon = [];
      if (!commonGroup.hasOwnProperty('save')) {
        commonGroup.children = [];
        commonGroup.save = [];
        commonGroup.data.children = [];
      }  
      
      // Move the clicked on node. Set the ordinals.
      detachForCommon(node);
      commonGroup.save.push(node);
      commonGroup.children = commonGroup.save;
      commonGroup.data.children.push(sourceNode);
      setOrdinal(commonGroup.data);

      // Move the other noted (found) nodes. Set the ordinals
      for (var k=0; k<otherNodes.length; k++) {
        var otherNode = otherNodes[k];
        detachForCommon(otherNode);
      } 
      node.otherCommon = otherNodes
      sourceNode.otherCommon = otherSourceNodes;
      setOrdinal(sourceNode.otherCommon);

      // Display the tree. Will need to set the parents in the new common group.
      setParent(commonGroup);
      displayNode(commonGroup);
      d3eDisplayTree(commonGroup.key);  

    } else {
      displayWarning("Common group not found within this group.");
      displayAlerts(html);
    }
  } else {
    if (bcParent == null && groupParent == null) {
      displayWarning("Something has gone wrong! Cannot find Biomedical Concept and the Group parent nodes.");
    } else if (bcParent == null) {
      displayWarning("Something has gone wrong! Cannot find Biomedical Concept parent nodes.");
    } else if (groupParent == null) {
      displayWarning("Something has gone wrong! Cannot find Group parent nodes.");
    }
    displayAlerts(html);
  }
}

// Detaches the node from its 'natural' position
function detachForCommon(node) {
  var sourceParent;
  var parent;
  parent = node.parent;
  sourceParent = parent.data;
  node.realParent = node.parent;
  parent.save.splice(node.index, 1);
  setParent(parent);
  sourceParent.children.splice(node.index, 1);
  setOrdinal(sourceParent);
}

// Restore from common to 'natural' position.
function restoreCommon(node) {
  var item;
  var parentNode;
  var parentSourceNode;
  var index;

  // Restore the 'other' nodes. These are the copies.
  for (i=0; i<node.otherCommon.length; i++) {
    item = node.otherCommon[i];
    parentNode = item.realParent;
    parentSourceNode = parentNode.data;
    index = item.index;
    parentNode.save.splice(index, 0, item);
    parentSourceNode.children.splice(index, 0, item.data);
    setOrdinal(parentSourceNode);
  }

  // Restore the 'main' node.
  parentNode = node.realParent
  parentSourceNode = parentNode.data;
  index = node.index;
  parentNode.save.splice(index, 0, node);
  parentSourceNode.children.splice(index, 0, node.data);
  setOrdinal(parentSourceNode);

  // Delete the item from its current position and clean out the other
  // common nodes.
  node.otherCommon = [];
  node.data.otherCommon = [];
  deleteNode(node);

  // Draw the tree. Set the root as the selected node.
  setRoot();
}

/*
* Group generic functions
*/
function newFormGroup(nullVar) {
  return { 
    type: C_NORMAL_GROUP, label: "", id: "", namespace: "", ordinal: 0, optional: false, repeating: false, 
    note: "", completion: "", biomedical_concept_reference: {}, children: [] };
}

function newCommonGroup(nullVar) {
  return {
    type: C_COMMON_GROUP, label: "", id: "", namespace: "", ordinal: 0, 
    optional: false, repeating: false, completion: "", note: "", bc_ref: {}, children: [] };
}

function newQuestion(nullVar) {
  return {
    type: C_QUESTION, label: "", id: "", namespace: "", ordinal: 0, 
    optional: false, completion: "", note: "", free_text: "", label_text: "", datatype: "I",
    format: "3", question_text: "", pText: "", mapping: "",
    children: [] 
  };
}

function newMapping(nullVar) {
  return {
    type: C_MAPPING, label: "", id: "", namespace: "", ordinal: 0, 
    optional: false, completion: "", note: "", mapping: "",
    children: [] 
  };
}

function newPlaceholder(nullVar) {
  return {
    type: C_PLACEHOLDER, label: "", id: "", namespace: "", ordinal: 0, 
    optional: false, completion: "", note: "", free_text: "", label_text: "",datatype: "",
    format: "", question_text: "", pText: "", mapping: "",
    children: [] 
  };
}

function newLabelText(nullVar) {
  return {
    type: C_TEXTLABEL, label: "", id: "", namespace: "", ordinal: 0, 
    optional: false, completion: "", note: "", free_text: "", label_text: "",datatype: "",
    format: "", question_text: "", pText: "", mapping: "",
    children: [] 
  };
}

function newBCGroup(bc) {
  // TODO: Extra fields in the biomedical_concept_reference
  return {
    type: C_NORMAL_GROUP, label: "", id: bc.id, namespace: bc.namespace, ordinal: 0, 
    optional: bc.optional, repeating: false, note: bc.note, 
    bc_ref: 
      { 
        enabled: true, 
        optional: false,
        ordinal: 0, 
        local_label: "",
        subject_ref: {id: bc.id, namespace: bc.namespace}
      },
    children: [] };
}

function newBCProperty(property) {
  // TODO: Extra fields in the property_reference
  return {
    type: C_BC_QUESTION, label: "", id: property.id, namespace: property.namespace, ordinal: 0, 
    optional: property.optional, note: property.note, free_text: property.free_text, datatype: property.datatype,
    format: property.format, question_text: property.question_text, pText: property.pText, mapping: property.mapping,
    bridgPath: property.bridgPath, 
    property_ref: 
      { 
        enabled: true, 
        optional: false,
        ordinal: 0, 
        local_label: "",
        subject_ref: {id: property.id, namespace: property.namespace}
      },
    children: [] 
  };
}

function newBCPropertyCli(cli) {
  return {
    type: C_TC_REF, 
    label: "", 
    id: "", 
    namespace: "",
    local_label: cli.Local_label, 
    ordinal: 0, 
    enabled: true, 
    optional: false,
    subject_ref: {id: cli.subject_ref.id, namespace: cli.subject_ref.namespace}
  };
}

function newQuestionCli(cli) {
  return {
    type: C_TC_REF, 
    label: "", 
    id: "", 
    namespace: "",
    local_label: cli.useful_2, 
    enabled: true,
    optional: false, 
    ordinal: 0, 
    subject_ref: {id: cli.subject_ref.uri_id, namespace: cli.subject_ref.uri_ns}
  };
}

function addGroup(currentNode) {
  var d3Node = addD3Node(currentNode, C_NORMAL_GROUP, "Group", newFormGroup, true);
  addSNode(currentNode.data, d3Node.data, true);
  return d3Node;
}

function addCommon(data) {
  var d3Node = addD3Node(currentNode, C_COMMON_GROUP, "Common", newCommonGroup, null, false);
  addSNode(currentNode.data, d3Node.data, false);
  return d3Node;
}

function addQuestion(currentNode) {
  var d3Node = addD3Node(currentNode, C_QUESTION, "Question", newQuestion, null, true, true);
  addSNode(currentNode.data, d3Node.data, true);
  return d3Node;
}

function addMapping(currentNode) {
  var d3Node = addD3Node(currentNode, C_MAPPING, "Mapping", newQuestion, null, true, true);
  addSNode(currentNode.data, d3Node.data, true);
  return d3Node;
}

function addPlaceholder(currentNode) {
  var d3Node = addD3Node(currentNode, C_PLACEHOLDER, "Placeholder", newPlaceholder, null, true, true);
  addSNode(currentNode.data, d3Node.data, true);
  return d3Node;
}

function addLabelText(currentNode) {
  var d3Node = addD3Node(currentNode, C_TEXTLABEL, "Label Text", newLabelText, null, true, true);
  addSNode(currentNode.data, d3Node.data, true)
  return d3Node;
}

function addBc() {
  var currentNode = d3eGetCurrent();
  var data = bcSelect.row(bcCurrentRow).data();
  bcD3Node = null;
  $.ajax({
    url: "/biomedical_concepts/" + data.id,
    data: {
      "id": data.id,
      "namespace": data.namespace
    },
    dataType: 'json',
    error: function (xhr, status, error) {
      var html = alertError("An error has occurred loading the Biomedical Concept.");
      displayAlerts(html);
    },
    success: function(result){
      var bc = $.parseJSON(JSON.stringify(result));
      var i;
      var j;
      var bcD3Node = addD3Node(currentNode, C_BC_QUESTION, bc.label, newBCGroup, bc, true, true);
      addSNode(currentNode.data, bcD3Node.data, true)
      for (i=0; i<bc.children.length; i++) {
        var property = bc.children[i];
        if (property.enabled && property.collect) {
          var propertyD3Node = addD3Node(bcD3Node, C_BC_QUESTION, property.alias, newBCProperty, property, true, true);
          addSNode(bcD3Node.data, propertyD3Node.data, true)
          for (j=0; j<property.children.length; j++) {
            var tcRef = property.children[j];
            var tcRefD3Node = addD3Node(propertyD3Node, C_TC_REF, tcRef.local_label, newBCPropertyCli, tcRef, true, true);
            tcRefD3Node.enabled = true    
            addSNode(propertyD3Node.data, tcRefD3Node.data, true);
            getReference(tcRefD3Node);
          }
        }
      }
      
      /* Now check for a common group and, if present, see if anything needs
      * moving.
      */
      /*if (hasCommon(currentNode)) {
        var item;
        var commonItem;
        var commonNode = currentNode.save[0];
        if (commonNode.hasOwnProperty('save')) {
          for (i=0; i<commonNode.save.length; i++) {
            commonItem = commonNode.save[i];
            for (j=0; j<bcD3Node.save.length; j++) {
              item = bcD3Node.save[j];
              if (item.data.bridgPath == commonItem.data.bridgPath) {
                // We have a match. Detach the item and add to the common item
                detachForCommon(item);
                commonItem.otherCommon.push(item);
                commonItem.data.otherCommon.push(item.data);
                setOrdinal(commonItem.otherCommon);
              }
            }
          }
        }
      }*/

      // And display everything.
      displayNode(currentNode);
      //d3eDisplayTree(currentNode.key);
    }
  });
}

function addD3Node(d3ParentNode, type, label, newFunction, functionData, atEnd, addCount=false) {
  var count;
  var text;
  if (addCount) {
    if (hasChildren(d3ParentNode)) {
      count = d3ParentNode.save.length + 1;
    } else {
      count = 1;
    }
    text = label + " " + count;
  } else {
    text = label;
  }
  var sNode = newFunction(functionData);
  sNode.label = text
  var d3Node = d3eAddNode(d3ParentNode, text, type, true, sNode, atEnd);   
  return d3Node
}

function addSNode(parent, node, end) {
  if (end) {
    parent.children.push(node);
  } else {
    parent.children.unshift(node);
  }
  for (i=0; i<parent.children.length; i++) {
    parent.children[i].ordinal = i + 1;
  }
}

/*
* Other utility functions
*/
function handleBCTable(table, ref) {
  // Toggle the highlight for the row
  if (bcCurrent != null) {
    $(bcCurrent).toggleClass('success');
  }
  $(ref).toggleClass('success');

  // Get the row
  var row = table.row(ref).index();
  var data = table.row(row).data();

  // Save the selection
  bcCurrent = ref;
  bcCurrentRow = row;
}

function handleQuestionTable(table, ref) {
  // Toggle the highlight for the row
  if (varClCurrent != null) {
    $(varClCurrent).toggleClass('success');
  }
  $(ref).toggleClass('success');

  // Get the row
  var row = table.row(ref).index();
  var data = table.row(row).data();

  // Save the selection
  varClCurrent = ref;
  varClCurrentRow = row;
}

function initData () {
  var managedItem;
  var html = $("#formJson").html();
  formDefinition = $.parseJSON(html);
  managedItem = formDefinition.managed_item;
  previousSave = currentSave = JSON.stringify(formDefinition);
  markdownElement = null;
  markdownType = "";
  bcCurrent = null;
  bcCurrentRow = null;
  notepadTableReload = false;
  notepadData = null;
  notepadRow = null; 
  varClCurrent = null;
  varClCurrentRow = null;
  questionDatatypeValue = "I";
  d3eInit(saveNode, displayNode);
  rootNode = d3eRoot(managedItem.label, C_FORM, managedItem)
  for (i=0; i<managedItem.children.length; i++) {
    child = managedItem.children[i];
    setD3(child, rootNode);
  }
}

/*
* Set the D3 Structures
*
* @param sourceNode [Object] The data node
* @param d3ParentNode [Object] The parent D3 node
* @return [Null]
*/
function setD3(sourceNode, d3ParentNode) {
  var use;
  var newNode;
  var i;
  var child;
  sourceNode.hasOwnProperty('is_common') ? use = !sourceNode.is_common : use = true;
  if (use) {
    newNode = d3eAddNode(d3ParentNode, sourceNode.label, sourceNode.type, true, sourceNode, true);
    getReference(newNode);
    if (sourceNode.hasOwnProperty('children')) {
      for (i=0; i<sourceNode.children.length; i++) {
        child = sourceNode.children[i];
        setD3(child, newNode);
      }
    }
  }
}

function saveNode() {
  $('#main_form').valid(); // Won't return if invalid.
  currentNode = d3eGetCurrent();
  if (currentNode.type == C_FORM) {
    saveForm(currentNode)
  } else if (currentNode.type == C_NORMAL_GROUP) {
    if (!isBcGroup(currentNode)) {
      saveGroup(currentNode)
    }
  } else if (currentNode.type == C_COMMON_GROUP) {
    saveCommon(currentNode)
  } else if (currentNode.type == C_PLACEHOLDER) {
    savePlaceholder(currentNode)
  } else if (currentNode.type == C_TEXTLABEL) {
    saveLabelText(currentNode)
  } else if (currentNode.type == C_QUESTION) {
    saveQuestion(currentNode)
  } else if (currentNode.type == C_MAPPING) {
    saveMapping(currentNode)
  } else if (currentNode.type == C_TC_REF) {
    saveCl(currentNode)
  } 
  saveRest();
}

function displayNode(node) {
  d3eDisplayTree(node.key);
  if (node.type ==  C_FORM ) {
    selectForm();
    displayForm(node);
  } else if (node.type == C_NORMAL_GROUP) {
    if (!isBcGroup(node)) {
      selectGroup();
      displayGroup(node);
    } else {
      selectBC();
      displayBC(node);
    }
  } else if (node.type == C_COMMON_GROUP) {
    selectCommon();
    displayCommon(node);
  } else if (node.type == C_BC_QUESTION) {
    selectItem();
    displayItem(node);
  } else if (node.type == C_QUESTION) {
    questionClTable.clear();
    selectQuestion();
    displayQuestion(node);
    questionClTable.draw(false);
  } else if (node.type == C_MAPPING) {
    selectMapping();
    displayMapping(node);
    questionClTable.draw(false);
  } else if (node.type == C_PLACEHOLDER) {
    selectPlaceholder();
    displayPlaceholder(node);
  } else if (node.type == C_TEXTLABEL) {
    selectLabelText();
    displayLabelText(node);
  } else if (node.type == C_TC_REF) {
    selectCl();
    displayCl(node);
  } 
}