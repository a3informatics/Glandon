var tagsColorsMap =
  {"SDTM" : "#f29c8c",
  "QS" : "#e4aca1", "QS-FT" : "#e4aca1", "COA" : "#e4aca1", "QRS" : "#e4aca1",
  "CDASH" : "#eec293",
  "ADaM" : "#b6d58f",
  "Protocol" : "#93c9b5",
  "SEND": "#a9aee0",
  "CDISC": "#9dc0cf",
  "default": "#6d91a1"}

function getColorByTag(tagName){
  if (tagName in tagsColorsMap)
    return tagsColorsMap[tagName];
  else return tagsColorsMap["default"];
}

function colorCodeTagsOutline(parent, tagClass){
  $.each($(parent).find(tagClass), function(i, e){
    var color = (getColorByTag($(e).context.localName == "input" ? $(e).val() : $(e).text()));
    $(e).css("background", "transparent");
    $(e).css("box-shadow", "inset 0 0 0 2px "+color);
  });
}

function colorCodeElement(selector, css, value){
  $(selector).css(css, value);
}

function colorCodeTagsBadge(tags){
  tags = tags.split('; ');
  var html = (tags.length > 0 && tags[0].length > 0) ? "" : "None";
  $.each(tags, function (i, e){
    if (e.length == 0) return;
    var color = getColorByTag(e);
    html +=
    "<span class='min-badge-item'>" +
      "<span class='circular-badge tiny' style='background: "+color+";'></span>" +
      e +
    "</span>"
  });
  return html;
}

var indicatorMap =
  {"current": {icon: "icon-current", ttip: "Current version"},
  "extended": {icon: "icon-extend", ttip: "Item is extended"},
  "extends": {icon: "icon-extension", ttip: "Item is an extension"},
  "version_count": {icon: "icon-multi", ttip: "Item has %n% versions"},
  "subset": {icon: "icon-subset", ttip: "Item is a subset"},
  "subsetted": {icon: "icon-subsetted", ttip: "Item is subsetted"}};

function formatIndicators(data){
  var indicatorsHtml = "";
  $.each(data, function(k, v){
    if(k != "version_count" && v == true)
      indicatorsHtml += "<span class='"+indicatorMap[k].icon+" indicator ttip'><span class='ttip-text ttip-left shadow-small'>"+indicatorMap[k].ttip+"</span></span>"
    else if (v > 1){
      indicatorsHtml += "<span class='"+indicatorMap[k].icon+" indicator ttip'><span class='ttip-text ttip-left shadow-small'>"+indicatorMap[k].ttip.replace("%n%", v)+"</span></span>"
    }
  });
  return indicatorsHtml;
}

function formatIndicatorsString(data){
  var output = "";

  $.each(data, function(k, v){
    if (k == "version_count")
      output += v + " versions, ";
    else if(v == true)
      output += indicatorMap[k].ttip + ", ";
  });

  return output;
}

// Colors and Icons

function typeIconMap(type){
  var icoMap = {};
  icoMap[C_TH_NEW] = 'icon-terminology';
  icoMap[C_TH_CL] = 'icon-codelist';
  icoMap[C_TH_SUBSET] = 'icon-subset';
  icoMap[C_TH_EXT] = 'icon-extension';

  return icoMap[type];
}

function typeIconCharMap(type){
  var icoMap = {};
  icoMap[C_TH_NEW] = '\ue909';
  icoMap[C_TH_CL] = '\ue952';
  icoMap[C_TH_SUBSET] = '\ue941';
  icoMap[C_TH_EXT] = '\ue945';

  return icoMap[type];
}

function typeToBgColor(type, params){
  if(params != null && params.owner != null && params.owner.toLowerCase() == "cdisc")
    return '#f5d684';

  var clrMap = {}
  clrMap[C_TH_NEW] = '#6d91a1';
  clrMap[C_TH_CL] = '#9dc0cf';
  clrMap[C_TH_SUBSET] = '#9dc0cf';
  clrMap[C_TH_EXT] = '#9dc0cf';

  return clrMap[type];
}

function typeToColorIcon(type, params){
  var size = params.size == null ? "small" : params.size;

  return '<span class="circular-badge '+ size +' text-white" style="background: '+ typeToBgColor(type, params) +';">' +
            '<span class="'+typeIconMap(type)+' text-xnormal"></span>' +
         '</span>';
}
