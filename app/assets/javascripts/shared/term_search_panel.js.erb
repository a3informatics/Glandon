/*
* Term Search
*/

/*
* Requires: JavaScript 'shared/tags' in the view
*/

/**
* Term Search Constructor
* @param context_id [String] The context_id of the Th
* @param callback [Function]
*
* @return [void]
*/
function TermSearch(context_id, callback, url) {
  this.selected = [];
  this.callback = callback; // Note that this can also be set in call to search
  this.searchUrl = url;
  this.ref = "";            // Set in call to search
  this.tsCurrentRef;
  this.tsCurrentRow;
  this.context_id = context_id;
  this.tsSearchTable = null;
  this.tsCurrentRef = null;
  this.tsCurrentRow = null;
  this.codeListAllowed = false;

  this.initTable();
  this.appendSearchBoxes();
  this.setListeners();

  var _this = this;

  $('#searchModal').on('shown.bs.modal', function () {
    _this.tsSearchTable.columns.adjust();
    _this.updateUI();
  });

  $("#searchTable input").css("width", "100%");

  if(!this.codeListAllowed)
    $(".modal-info").append("<i>Code Lists cannot be included and appear grey in the table. Only Code List Items are allowed.</i>")
}

/**
* Initializes the datatable. Note the deferLoading setting.
*
* @return [void]
*/
TermSearch.prototype.initTable = function() {
  this.tsSearchTable = $('#searchTable').DataTable({
    "pageLength": 5,
    "lengthMenu": [5, 10, 15, 25, 50, 100],
    "columns": this.columns(),
    "processing": true,
    "serverSide": true,
    "ajax": {
      "url": this.searchUrl,
    },
    "deferLoading": 0,
    "language": {
      "infoFiltered": "",
      "emptyTable": "Type a search string into one of the columns or use global search (top right) to see data",
      "processing":  generateSpinner("medium")
    },
    "orderCellsTop": true,
    "select": {
        style: 'multi'
    },
    "rowCallback": function(row, data) {
      if (this.selectionContains(data["id"]))
        this.tsSearchTable.row(row).select();
      if(!this.codeListAllowed && data.identifier == data.parent_identifier)
        $(row).addClass("disabled");
    }.bind(this),
  });
};

/**
* Handles the UI for selection of deselection of an item in the table
* @param id [String] Item ID to handle
* @param select [Boolean] selecting/deselecting ~ true/false
*
* @return [void]
*/
TermSearch.prototype.selectOrDeselectItem = function(id, select) {
  if(select){
    if(!this.selectionContains(id))
      this.selected.push(id);
  }
  else {
    if(this.selectionContains(id))
      this.selected = $.grep(this.selected, function(v){return v != id});
  }

  this.updateUI();
}

/**
* Updates UI of the search modal
*
* @return [void]
*/
TermSearch.prototype.updateUI = function() {
  var itemCount = this.selected.length;
  $(".selection-info #number-selected").text(itemCount);

  if (itemCount > 0)
    $('#add_terms').removeClass('disabled');
  if (itemCount == 0)
    $('#add_terms').addClass('disabled');
}

/**
* Resets the UI of the table to clear search
*
* @return [void]
*/
TermSearch.prototype.resetSearchUI = function() {
  $("#searchTable_filter input").val("");
  this.tsSearchTable.columns().every( function () {
    $('#searchTable thead input').val("");
  });
  this.tsSearchTable.search('');
  this.tsSearchTable.columns().search('');
  this.tsSearchTable.rows().remove().draw();
}

/**
* Appends search boxes to the search table
*
* @return [void]
*/
TermSearch.prototype.appendSearchBoxes = function() {
  // Setup - add a text input to each header cell
  $('#searchTable thead tr:eq(1) th').each( function () {
    var title = $(this).text();
    var id = "searchTable_csearch_" + title.toLowerCase();
    if (title == "Extensible") {
      // Do nothing
    } else if (title == "Definition") {
      $(this).html( '<input id="' + id + '" type="text" class="form-control" size="20" placeholder="Search ..." />' );
    } else {
      $(this).html( '<input id="' + id + '" type="text" class="form-control" size="10" placeholder="Search ..." />' );
    }
  });
}

/**
* Sets the listeners and handlers for all events in the term_search_panel
*
* @return [void]
*/
TermSearch.prototype.setListeners = function() {
  var _this = this;

  // Select item within table event
  this.tsSearchTable.on('select', function (e, dt, type, indexes) {
    if(type == "row"){
      var rowData = _this.tsSearchTable.row(indexes[0]).data();
      _this.selectOrDeselectItem(rowData.id, true);
    }
  });

  // Deselect item within table event
  this.tsSearchTable.on('deselect', function (e, dt, type, indexes) {
    if(type == "row"){
      var rowData = _this.tsSearchTable.row(indexes[0]).data();
      _this.selectOrDeselectItem(rowData.id, false);
    }
  });

  // Get selected rows callback
  $('#add_terms').off('click').on('click', function() {
    if (_this.selected.length > 0)
      _this.callback(_this.selected);

    $('#searchModal').modal('hide');
    _this.selected = [];
    _this.resetSearchUI();
  });

  //Clear search
  $('#clear_search').off('click').on('click', function(){
    _this.resetSearchUI();
  });

  //Clear selection
  $('#clear-selection').off('click').on('click', function(){
    _this.tsSearchTable.rows({selected: true}).deselect();
    _this.selected = [];
    _this.updateUI();
  });

  // Add search functionality to search inputs.
  this.tsSearchTable.columns().every(function (index) {
    var that = this;
      $('#searchTable thead tr:eq(1) th:eq(' + index + ') input').on( 'keyup', function (e) {
      if (e.which == 13 || this.value == "") {
        if (that.search() !== this.value) {
          that.search(this.value).draw();
        }
      }
    });
  });

  // Apply the overall search. Fires on return or field empty assuming not the
  // current search value (i.e. something has changed).
  $("#searchTable_filter input")
    .unbind() // Unbind previous default bindings
    .bind("keyup", function(e) { // Bind our desired behavior
    if(this.value == "" || e.keyCode == 13) {
      if (_this.tsSearchTable.search() !== this.value) {
        _this.tsSearchTable.search(this.value).draw();
      }
    }
  });

  // handle double click on terminology table
  $('#searchTable tbody').on('dblclick', 'tr', function () {
    if (_this.tsSearchTable.data().any() ) {
      if (_this.tsCurrentRef != null) {
      }
      var row = _this.tsSearchTable.row(this).index();
      _this.tsCurrentRef = this;
      _this.tsCurrentRow = row;
      var data = _this.tsSearchTable.row(row).data();
      // Clear search fields in UI and within datatables.
      $("#searchTable_filter input").val("");
      _this.tsSearchTable.columns().every( function () {
        $('#searchTable thead input').val("");
      });
      _this.tsSearchTable.search('');
      _this.tsSearchTable.columns().search('');
      // Set our parent identifier search and trigger.
      $('#searchTable_csearch_cl').val(data.parent_identifier);
      var e = jQuery.Event("keyup");
      e.which = 13;
      e.keyCode = 13;
      $('#searchTable_csearch_cl').trigger(e);
    }
  });
}

/**
* Checks if current item selection contains an id
*
* @return [Boolean] value true if contained in the selection
*/
TermSearch.prototype.selectionContains = function(id) {
  return $.inArray(id, this.selected) != -1;
}

/**
* Search function ?
*
* @return [void]
*/
TermSearch.prototype.search = function(ref, div, callback) {
  this.ref = ref;
  this.div = div;
  this.callback = callback;
  $('#searchModal').modal('show');
}

/**
* Returns column definitions for the search table
*
* @return [Array] column definitions
*/
TermSearch.prototype.columns = function() {
  return [
    {"data" : "parent_identifier", "width" : "10%"},
    {"data" : "parent_label", "width" : "10%"},
    {"data" : "identifier", "width" : "10%"},
    {"data" : "notation", "width" : "10%"},
    {"data" : "preferred_term", "width" : "10%" },
    {"data" : "synonym", "width" : "10%" },
    {"data" : "definition", "width" : "30%"},
    {"data" : "tags", "width" : "10%", "render" : function (data, type, row, meta) {
      return (data == null ? data : colorCodeTagsBadge(data));
    }}
  ];
}
