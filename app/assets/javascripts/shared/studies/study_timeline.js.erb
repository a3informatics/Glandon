/*
* Study Timeline
*
* Only in Study Build page
*/

/**
 * Study Timeline Constructor
 *
 * @param armId [String] id of the arm to which this instance belongs
 * @param matrixRef [Object Instance] reference to the parent matrix instance
 * @return [void]
 */
function StudyTimeline(armId, matrixRef) {
  this.armId = armId;
  this.matrix = matrixRef;
  this.ready = false;

  this.tabName = "tab-timeline";
  this.wrapper = $("#tab-timeline-body");
  this.div = this.wrapper.find("#study-timeline");

  this.tpRadius = 30;
  this.tpDialog = new ContextDialog("0");

  this.data = { timepoints: [], renderTimepoints: [] }
}


/**
 ************** General **************
**/


/**
 * Shows timeline
 *
 * @return [void]
 */
StudyTimeline.prototype.show = function() {
  if (this.ready)
    this.render(this.data.timepoints);
  else
    this.loadData();
}

/**
 * Loads timeline data
 *
 * @return [void]
 */
StudyTimeline.prototype.loadData = function() {
  this.loading(true);

  // TODO: Ajax call for data
  // TODO: this.ready = true;

  this.data.timepoints = this.mockData();
  this.ready = true;

  this.loading(false);
  this.render(this.data.timepoints);
}

/**
 * Sets event listeners and handlers
 *
 * @return [void]
 */
StudyTimeline.prototype.setListeners = function() {
  this.div
    .off("click", ".timepoint")
    .on("click", ".timepoint", this.openTpContextDialog.bind(this));
}

/**
 * Renders timeline based on a set of timepoints
 *
 * @param timepointSet [Array] set or subset of timepoint data objects to render
 * @return [void]
 */
StudyTimeline.prototype.render = function(timepointSet) {
  this.data.renderTimepoints = timepointSet;
  this.div.empty();
  this.tpDialog.clear();
  this.div.addClass("fadein");

  this.div.append("<div id='tl-wrapper'></div>");
  var wrap = this.div.find("#tl-wrapper");

  wrap.append(this.axisHTML());

  $.each(timepointSet, function(index, timepoint) {
    wrap.append(this.timepointHTML(timepoint));
  }.bind(this));

  var epochs = this.matrix.data.epochs;
  $.each(epochs, function(index, epoch){
    wrap.append(this.epochHTML(epoch));
  }.bind(this));

  setTimeout(function(){this.div.removeClass("fadein")}.bind(this), 1);

  this.setListeners();
}


/**
 ************** Timepoint Details **************
**/


/**
 * Shows context dialog with timepoint details.
 *
 * @return [void]
 */
StudyTimeline.prototype.openTpContextDialog = function(e) {
  var timepointData = this.findTimepoint("id", $(e.currentTarget).attr("data-id"));

  this.tpDialog.show({
    element: $(e.currentTarget),
    title: "Time Point",
    subtitle: this.tpActionBtnsHTML(),
    content: this.tpDetailsHTML(timepointData)
  });

  this.tpDialogListeners();
}

/**
 * Event listeners and handlers for a timepoint context dialog
 *
 * @return [void]
 */
StudyTimeline.prototype.tpDialogListeners = function(e) {
  this.tpDialog.setListeners();

  $(this.tpDialog.id).on("click", ".bg-label", this.removeBCFromTp.bind(this));
  $(this.tpDialog.id).find("#add-bcs").on("click", this.addBCToTp.bind(this));
}

/**
 * Remove a BC from a timepoint request, UI update
 *
 * @return [void]
 */
StudyTimeline.prototype.removeBCFromTp = function(e) {
  var wrapper = $(e.currentTarget).closest(".timepoint-details");
  var bcId = $(e.currentTarget).attr("data-id");

  $(e.currentTarget).remove();
}

/**
 * Show selector dialog, add BCs to a timepoint request, UI update
 *
 * @return [void]
 */
StudyTimeline.prototype.addBCToTp = function(e) {
  var _this = this;
  var wrapper = $(e.currentTarget).closest(".timepoint-details");

  this.matrix.bcsSelector.setCallback(function(data) {
    $.each(data.bcs, function(idx, bc) {
      // TODO: Add server request to post data
      // TODO: Handle server response on added BCs (re-draw the dialog)
      wrapper.find(".bg-labels-wrap")
        .append("<span class='bg-label removable' data-id='"+ bc.id +"'>"+
                  _this.bcLabel(bc) +
                "</span>");
    });
  })

  this.matrix.bcsSelector.show();
}



/**
 ************** HTML **************
**/


/**
 * Generates HTML for the axis
 *
 * @return [String] Styled axis HTML
 */
StudyTimeline.prototype.axisHTML = function() {
  var arm = this.matrix.getItem("id", this.armId, "arms");

  var axisColor = this.matrix.hslString(arm.color),
      axisLabel = "<div class='axis-label' style='color: "+ axisColor +"'>" +
                    arm.label +
                  "</div>";

  return "<div id='timeline-axis' style='background-color: " + axisColor + "'>" +
            axisLabel +
         "</div>";
}

/**
 * Generates HTML for a single timepoint
 *
 * @param timepoint [Object] timepoint to generate HTML for
 * @return [String] formatted timepoint HTML
 */
StudyTimeline.prototype.timepointHTML = function(timepoint) {
  timepoint.offsetLeft = this.tpOffset(timepoint);

  var tpOffset = "calc(" + timepoint.offsetLeft + "% - " + this.tpRadius/2 + "px)",
      epochColor = this.matrix.getItem("id", timepoint.epoch_id, "epochs").color,
      tpColor = this.matrix.hslString({h: epochColor.h, s: epochColor.s + 10, l: epochColor.l}),
      tpBadgeBgColor = this.matrix.hslString({h: epochColor.h, s: epochColor.s - 40, l: epochColor.l - 22});

  var tpStyle = "left: " + tpOffset + "; " +
                "background-color: " + tpColor + ";",
      tpClass = "timepoint" + (timepoint.baseline ? " baseline" : ""),
      tpContents = "<span class='tp-badge' style='background: "+ tpBadgeBgColor +"'>"+
                      timepoint.biomedical_concepts.length +
                   "</span>" +
                   "<span class='tp-label'>"+
                    this.timepointLabel(timepoint) +
                   "</span>";

  return "<div class='"+ tpClass +"' style='"+ tpStyle +"' tabindex='0' data-id='"+ timepoint.id +"'>" +
            tpContents +
          "</div>";
}

/**
 * Generates HTML for an epoch on the timeline
 *
 * @param epoch [Object] single epoch object
 * @return [String] epoch HTML to be appended to timeline
 */
StudyTimeline.prototype.epochHTML = function(epoch) {
  var epochCSS = this.getEpochCSS(epoch);

  if(_.isNull(epochCSS))
    return "";

  var style = "background-color: " + epochCSS.bgColor + "; " +
              "left: " + epochCSS.offsetLeft + "; " +
              "width: " + epochCSS.width + ";";

  var content = "<div class='epoch-label' style='color: "+ epochCSS.labelColor +"'>" +
                  epoch.label +
                "</div>";

  // HTML to Render
  return "<div class='epoch-block' style='"+ style +"' data-epoch-id='"+epoch.id+"'>" +
            content +
         "</div>";
}

/**
 * Makes a CSS width string for an epoch, based on various conditions
 *
 * @param epoch [Object] single epoch object
 * @param edgeTimepoints [Array] edge timepoints calculated by getEpochEdgeTps
 * @return [String] CSS Width string for an Epoch HTML / null if no epoch data
 */
StudyTimeline.prototype.getEpochCSS = function(epoch, edgeTimepoints) {
  var edgeTimepoints = this.getEpochEdgeTps(epoch);

  // No timepoints in an epoch - do not render
  if (_.isEmpty(edgeTimepoints))
      return null;

  var epochBgColor = this.matrix.hslString({h: epoch.color.h, s: epoch.color.s - 10, l: epoch.color.l + 12 }),
      epochLabelColor = this.matrix.hslString({h: epoch.color.h, s: epoch.color.s - 10, l: epoch.color.l - 40 }),
      epochWidth, epochOffsetLeft;

  // No next timepoint after epoch
  if (_.isUndefined(edgeTimepoints[1])) {
    var lastTimepoint = _.last(this.data.renderTimepoints);

    // First and last timepoints are the same
    if (lastTimepoint.id == edgeTimepoints[0].id)
      epochWidth = "calc(100% - " + lastTimepoint.offsetLeft + "% + " + this.tpRadius/2 + "px)";
    // First and last timepoints are not the same - find difference
    else {
      var difference = lastTimepoint.offsetLeft - edgeTimepoints[0].offsetLeft;
      epochWidth = "calc(100% - " + edgeTimepoints[0].offsetLeft +"% + " + this.tpRadius/2 + "px)";
    }
  }
  else {
    // Difference between first epoch timepoint and first next epoch timepoint
    var difference = edgeTimepoints[1].offsetLeft - edgeTimepoints[0].offsetLeft;
    epochWidth = difference + "%";
  }

  epochOffsetLeft = "calc(" + edgeTimepoints[0].offsetLeft + "% - " + this.tpRadius/2 + "px)" || "0";

  return {
    bgColor: epochBgColor,
    labelColor: epochLabelColor,
    width: epochWidth,
    offsetLeft: epochOffsetLeft
  };
}

/**
 * Finds first timepoint belonging to an epoch, and the first timepoint of the next epoch
 *
 * @param epoch [Object] single epoch object
 * @return [Array] [0] first epoch timepoint, [1] first next epoch timepoint / null
 * returns empty [] if no timepoints found
 */
StudyTimeline.prototype.getEpochEdgeTps = function(epoch) {
  var epochTimepoints = _.filter(this.data.renderTimepoints, function (tp) { return tp.epoch_id == epoch.id; }),
      nextTimepointIndex = _.indexOf(this.data.renderTimepoints, _.last(epochTimepoints)) + 1;
      nextTimepoint = this.data.renderTimepoints[nextTimepointIndex];

  if (_.isEmpty(epochTimepoints))
    return [];

  return [epochTimepoints[0], nextTimepoint];
}

/**
 * Calculates timepoint offset in % relative to max offset
 *
 * @param timepoint [Object] timepoint to calculate offset for
 * @return [Int] timepoint offset in %
 */
StudyTimeline.prototype.tpOffset = function(timepoint) {
  var maxOffset = _.last(this.data.renderTimepoints).offset;
  var minOffset = _.first(this.data.renderTimepoints).offset;

  // Add 5% buffer for the right edge of the timeline
  maxOffset += Math.abs((maxOffset - minOffset) * 0.05);

  var result = ((timepoint.offset - minOffset) * 100) / (maxOffset - minOffset);

  if (isNaN(result))
    return 0;

  return Math.round(result * 100) / 100;
}


/**
 * Generates HTML action buttons to be shown in timepoint details dialog
 *
 * @param [Object] Timepoint data object
 * @return [String] Action buttons HTML
 */
StudyTimeline.prototype.tpActionBtnsHTML = function(timepoint) {
  return  "<span class='text-link icon-edit clickable' style='margin-right: 10px;'></span>" +
          "<span class='text-accent-2 icon-trash clickable'></span>";
}

/**
 * Generates HTML for timepoint details dialog
 *
 * @param [Object] Timepoint data object
 * @return [String] Timepoint details dialog formatted HTML
 */
StudyTimeline.prototype.tpDetailsHTML = function(timepoint) {
  var epochName = this.matrix.getItem("id", timepoint.epoch_id, "epochs").label,
      armName = this.matrix.getItem("id", this.armId, "arms").label,
      html = "";

  html += "<div class='timepoint-details' data-id='"+ timepoint.id +"'>";
  html +=   "<div class='font-regular text-normal'>" +
              this.timepointLabel(timepoint) +
            "</div>";

  html +=   timepoint.baseline ? "<span class='text-accent-2'>Baseline</span><br/>" : "";
  html +=   "Epoch: <span class='text-link'>"+ epochName +"</span><br/>";
  html +=   "Arm: <span class='text-link'>"+ armName +"</span><br/>";

  html +=   "Biomedical Concepts: (click to remove)";
  html +=   "<div class='bg-labels-wrap scroll-styled'>";
  html +=     _.isEmpty(timepoint.biomedical_concepts) ? "None" : "";

  $.each(timepoint.biomedical_concepts, function(index, bc){
    html +=   "<span class='bg-label removable' data-id='"+ bc.id +"'>"+ this.bcLabel(bc) +"</span>";
  }.bind(this));

  html +=   "</div>";
  html +=   "<button class='btn btn-xs green' id='add-bcs'>+ Add BCs</button>";
  html += "</div>";

  return html;
}


/**
 ************** Support **************
**/


/**
 * Filters timepoints based on a value
 *
 * @param paramType [String] name of the property to filter on
 * @param value [String] value to compare
 * @return [Array] filtered array of this instance's timepoint data
 */
StudyTimeline.prototype.filterTimepoints = function(paramType, value) {
  return this.data.timepoints.filter( function(tp) { return tp[paramType] == value });
}

/**
 * Finds a timepoint based on the parameters
 *
 * @param property [String] property type (eg id)
 * @param value [Anything] value to compare
 * @return [Object] first timepoint matching / null if not found
 */
StudyTimeline.prototype.findTimepoint = function(property, value) {
  var result = null;

  $.each(this.data.timepoints, function(index, timepoint) {
    if (timepoint[property] == value) {
      result = timepoint;
      return false;
    }
  });

  return result;
}

/**
 * Sets event listeners and handlers
 *
 * @param enable [Boolean] enable or disable loading
 * @return [void]
 */
StudyTimeline.prototype.loading = function(enable) {
  this.matrix.armLoading(this.armId, enable)
}

/**
 * Generates HTML for the axis
 *
 * @param [Object] Timepoints data object
 * @return [String] Styled axis HTML
 */
StudyTimeline.prototype.bcLabel = function(bc) {
  return bc.label + " (" + (bc.identifier || bc.has_identifier.identifier) + ") v" + (bc.semantic_version || "0.1.0");
}

/**
 * Builds a string time label for a timepoint
 *
 * @param timepoint [Object] timepoint object to generate label for
 * @return [Int] timepoint offset in %
 */
StudyTimeline.prototype.timepointLabel = function(timepoint) {
  return timepoint.unit + " " + timepoint.value;
}



StudyTimeline.prototype.mockData = function() {
  this.ready = true;
  switch(this.armId){
    case "210x":
      return [
        {
          id: "991",
          epoch_id: "111x",
          arms: ["210x", "310x"],
          element_id: "211x",
          unit: "Week",
          value: -2,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: -2
        },
        {
          id: "992",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "212x",
          unit: "Day",
          value: 0,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: true,
          offset: 0
        },
        {
          id: "993",
          epoch_id: "112x",
          arms: ["210x", "310x"],
          element_id: "213x",
          unit: "Week",
          value: 8,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: 8
        },
        {
          id: "994",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "214x",
          unit: "Week",
          value: 12,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: 12
        },
        {
          id: "995",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "214x",
          unit: "Week",
          value: 16,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}, {identifier: "BC2", label: "Label 2", semantic_version: "1.2.0", id: "882"},
                                {identifier: "BC3", label: "Label 3", semantic_version: "1.2.1", id: "883"}],
          baseline: false,
          offset: 16
        },
        {
          id: "996",
          epoch_id: "116x",
          arms: ["210x"],
          element_id: "214x",
          unit: "Week",
          value: 18,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}, {identifier: "BC2", label: "Label 2", semantic_version: "1.2.0", id: "882"}],
          baseline: false,
          offset: 18
        },
      ];
    case "310x":
      return [
        {
          id: "991",
          epoch_id: "111x",
          arms: ["210x", "310x"],
          element_id: "211x",
          unit: "Week",
          value: -2,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}, {identifier: "BC2", label: "Label 2", semantic_version: "1.2.0", id: "882"}],
          baseline: false,
          offset: -2
        },
        {
          id: "992",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "212x",
          unit: "Day",
          value: 0,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: true,
          offset: 0
        },
        {
          id: "993",
          epoch_id: "112x",
          arms: ["210x", "310x"],
          element_id: "213x",
          unit: "Week",
          value: 4,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}, {identifier: "BC2", label: "Label 2", semantic_version: "1.2.0", id: "882"}],
          baseline: false,
          offset: 4
        },
        {
          id: "994",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "214x",
          unit: "Month",
          value: 2,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: 8
        },
      ];
    case "410x":
      return [
        {
          id: "990",
          epoch_id: "111x",
          arms: ["210x", "310x"],
          element_id: "211x",
          unit: "Week",
          value: -2,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: -2
        },
        {
          id: "991",
          epoch_id: "111x",
          arms: ["210x"],
          element_id: "212x",
          unit: "Day",
          value: -2,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: -0.2
        },
        {
          id: "992",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "212x",
          unit: "Day",
          value: 0,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: true,
          offset: 0
        },
        {
          id: "993",
          epoch_id: "112x",
          arms: ["210x", "310x"],
          element_id: "213x",
          unit: "Week",
          value: 4,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}, {identifier: "BC2", label: "Label 2", semantic_version: "1.2.0", id: "882"}],
          baseline: false,
          offset: 4
        },
        {
          id: "994",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "214x",
          unit: "Month",
          value: 2,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: 8
        },
        {
          id: "995",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "214x",
          unit: "Month",
          value: 4,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: 16
        },
        {
          id: "996",
          epoch_id: "112x",
          arms: ["210x"],
          element_id: "214x",
          unit: "Month",
          value: 6,
          biomedical_concepts: [{identifier: "BC", label: "Label", semantic_version: "1.0.0", id: "881"}],
          baseline: false,
          offset: 24
        },
      ];
  }

}
