function EditorPanel(childrenPath, updatePath, parentId, editLockCallback) {
  this.count = 30; // Table read size
  this.editLockCallback = editLockCallback;
  this.childrenPath = childrenPath;
  this.updatePath = pathInsertId(updatePath, "");
  this.parentId = parentId;

  this.editor = new $.fn.dataTable.Editor( {
    ajax: {
      edit: {
        type: 'PUT',
        url: this.updatePath + '_id_'
      },
    },
    table: "#editor_table",
    idSrc: "id",
    fields:
    [
      {
          name: "parent_id"
      },
      {
          label: "Submission Value:",
          name: "notation"
      },
      {
          label: "Preferred term:",
          name: "preferred_term"
      },
      {
          label: "Synonym:",
          name: "synonym"
      },
      {
          label: "Definition:",
          name: "definition"
      }
    ]
  });

  var loading_html = generateSpinner("medium");

  this.editorTable = $('#editor_table').DataTable({
    pageLength: pageLength,
    lengthMenu: pageSettings,
    processing: true,
    language: {
      "infoFiltered": "",
      "emptyTable": "No changes.",
      "processing": loading_html
    },
    columns: [
      { data: "identifier" },
      { data: "notation" },
      { data: "preferred_term" },
      { data: "synonym" },
      { data: "definition" },
      { data: null, "render": function(data,type,full,meta) {
        return '<button type="button" class="btn btn-primary btn-xs">Edit</button>';
      }},
      { data: null, "render": function(data,type,full,meta) {
        return '<button type="button" class="btn btn-danger btn-xs">Delete</button>';
      }}
    ],
    rowId: "id",
    keys: {
      columns: [ 1, 2, 3, 4 ], // Key codes to be listened to and the columns
      keys: [ 9, 38, 40 ]
    }
  });

  var _this = this;

  // Click on the table.
  $('#editor_table').on('click', 'tbody td:not(:first-child)', function (e) {
    var idx = _this.editorTable.cell(this).index();
    var row = idx.row;
    var col = idx.column;
    var data = _this.editorTable.cell(this).data();

    if (col == 5) {
      _this.editLockCallback(); // Extend the token
      keepToken = true; // Keep the token. Important
      window.location.href = data.edit_path;
    } else if (col == 6) {
      if(confirm("Are you sure?")) {
        _this.delete(data.delete_path);
      }
    } else {
      _this.editor.inline(_this.editorTable.cell(this).index(), { submitOnBlur: true, submit: 'changed' });
    }
  });

  // Inline editing on tab focus
  $('#editor_table').on( 'key-focus', function ( e, datatable, cell ) {
     _this.editor.inline( cell.index(), { submitOnBlur: true, submit: 'changed' } );
  } );

  // Presubmit event. Format the data.
  this.editor.on('preSubmit', function ( e, d, type ) {
    if ( type === 'edit' ) {
      d.edit = d.data[Object.keys(d.data)[0]];
      d.edit.parent_id = parentId;
      delete d.data;
    }
    return true;
  });

  // Submit error event. Route to the specified link.
  this.editor.on('submitError', function (e, xhr, err, thrown, data) {
    window.location.href = xhr.responseJSON.link;
  });

  // Postsubmit event. Extend the timeout
  this.editor.on('postSubmit', function ( e, json, data, type ) {
    _this.editLockCallback();
    _this.editorTable.processing(false);
  });

  this.fill(0);

}

/**
 * Get items to table
 *
 * @return [void]
 */
EditorPanel.prototype.fill = function (offset) {
  var _this = this;
  _this.editorTable.processing(true);
  $.ajax({
    url: _this.childrenPath,
    type: 'GET',
    dataType: 'json',
    success: function(result) {
      for (i=0; i<result.data.length; i++) {
        var row = _this.editorTable.row.add(result.data[i]);
      }
      _this.editorTable.draw();
      if (result.count >= _this.count) {
       _this.fill(result.offset + _this.count)
      } else {
        _this.editorTable.processing(false);
      }
    },
    error: function(xhr,status,error){
      handleAjaxError(xhr, status, error);
      _this.editorTable.processing(false);
    }
  });
}

/**
 * Add item to table
 *
 * @return [void]
 */
EditorPanel.prototype.add = function (record) {
  var _this = this;
  var row = _this.editorTable.row.add(record);
  _this.editorTable.draw();
}

/**
 * Delete an item
 *
 * @return [void]
 */
EditorPanel.prototype.delete = function(url) {
  var _this = this;
  $.ajax({
    url: url,
    type: 'DELETE',
    dataType: 'json',
    contentType: 'application/json',
    success: function(result){
      displaySuccess("The concept has been deleted.");
      _this.editorTable.clear();
      _this.fill(0);
      _this.editLockCallback();
    },
    error: function(xhr,status,error){
      handleAjaxError(xhr, status, error);
    }
  });
}

// Null function for page unload. Nothing to do
function pageUnloadAction() {
}
