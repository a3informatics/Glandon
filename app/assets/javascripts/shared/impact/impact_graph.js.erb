/*
* Impact Analysis Graph
*
*/

/**
 * Impact Analysis Graph Constructor
 * Gets data, builds and renders impact graph, handles events
 *
 * @param dataUrl [String] url to fetch the data
 * @return [void]
 */
function ImpactGraph(dataUrl) {
  this.cache = {};
  this.graphBaseUrl = graphBaseUrl;
  this.tabName = "tab-graph";
  this.data = null;

  this.itemsAffectedPanel = new ManagedItemIconList("No affected items found.");

  this.graph = new D3GraphV2();
}

/**
 * Loads data
 *
 * @return [void]
 */
ImpactGraph.prototype.loadData = function(item) {
  if (this.isCached(item.id)) {
    this.loading(true);
    this.data = this.cache[item.id];
    this.renderData(this.data);
    this.loading(false);
  }
  else {
    item.rdf_type = "http://www.assero.co.uk/Thesaurus#ManagedConcept";
    this.data = [item];
    this.fetch(0, item.id, item);
  }
}

/**
 * Fetches data
 *
 * @return [void]
 */
ImpactGraph.prototype.fetch = function(step, rootId, currentItem) {
  var dataUrl = this.makeDataUrl(currentItem.id);
  this.loading(true);

  $.ajax({
    url: dataUrl,
    type: 'GET',
    dataType: 'json',
    context: this,
    success: function(result) {
      console.log(result);
      if (result.data.length != 0) {
        var filteredData = this.mergeData(result.data, currentItem);
        this.data = this.data.concat(filteredData);

        $.each(filteredData, function(i, item){
          this.fetch(step + 1, rootId, item);
        }.bind(this));

        if(filteredData.length == 0){
          this.saveToCache(rootId, this.data);
          this.renderData(this.data);
          this.loading(false);
        }
      }
      else {
        this.saveToCache(rootId, this.data);
        this.renderData(this.data);
        this.loading(false);
      }
    },
    error: function(xhr,status,error){
      handleAjaxError(xhr, status, error);
      this.loading(false);
    }
  });
}

/**
 * Prepares nodes, links, draws graph, draws table
 *
 * @return [void]
 */
ImpactGraph.prototype.mergeData = function(newData, currentItem) {
  var filtered = [];
  $.each(newData, function(i, item){
    var indexInArray = this.data.map(function(e) { return e.id; }).indexOf(item.id);

    if (indexInArray == -1) {
      item.link = [currentItem.id];
      filtered.push(item);
    }
    else {
      if(this.data[indexInArray].link != null)
        this.data[indexInArray].link.push(currentItem.id);
      else
        this.data[indexInArray].link = [currentItem.id];
    }
  }.bind(this));

  return filtered;
}
/**
 * Prepares nodes, links, draws graph, draws table
 *
 * @return [void]
 */
ImpactGraph.prototype.renderData = function(data) {
  this.itemsAffectedPanel.addItems(data.slice(1));

  setTimeout(function(){
    var nodes = JSON.parse(JSON.stringify(data));
    var links = [];

    $.each(nodes, function(i, n){
      if(n.link != null && n.link.length != 0){
        $.each(n.link, function(i, l){
          var indexSource = nodes.map(function(e) { return e.id; }).indexOf(n.id);
          var indexTarget = nodes.map(function(e) { return e.id; }).indexOf(l);

          var linksContainLink = false;
          $.each(links, function(i, link){
            if((link.source == indexSource && link.target == indexTarget) || (link.source == indexTarget && link.target == indexSource) )
              linksContainLink = true;
          });

          if (!linksContainLink)
            links.push({source: indexSource, target: indexTarget});
        });
      }
    });
    var graphData = {links: links, nodes: nodes};
    this.graph.draw(graphData);

  }.bind(this), 100);
}

/**
 * Loads data
 *
 * @param item [Object] item to start the IA on
 * @return [void]
 */
ImpactGraph.prototype.reload = function(item) {
  // clear graph

  this.loadData(item);
}

/**
 * Saves data to cache
 *
 * @param id [String] id of the data root (key value in the cache)
 * @param data [Array] array of node objects
 * @return [void]
 */
ImpactGraph.prototype.saveToCache = function(id, data) {
  // if(this.cache[id] == null)
    this.cache[id] = data;
}

/**
 * Checks if data is cached
 *
 * @param id [String] id of the data root (key value in the cache)
 * @return [Boolean] data presence in cache
 */
ImpactGraph.prototype.isCached = function(id) {
  return this.cache[id] != null;
}

/**
 * Checks if data is cached
 *
 * @param url [String] url of the data source (key value in the cache)
 * @return [Boolean] data presence in cache
 */
ImpactGraph.prototype.makeDataUrl = function(id) {
  return this.graphBaseUrl.replace("clId", id);
}

/**
 * Enable / disable loading
 *
 * @param enable [Boolean] true/false ~ show / hide loading
 * @return [void]
 */
ImpactGraph.prototype.loading = function(enable) {
  if (typeof tabLoading != "undefined"){
      this.itemsAffectedPanel.loading(enable);
      tabLoading(this.tabName, enable);
  }
}
