/*
 * Selection Overview Table
 *
 * Requires:
 * 1 or more children tables [Table]
 * 1 overview table [Table] this table
 */

/**
 * Managed Children Selection Overview Table
 * @param [String] url of the data source, must match columns format on the bottom
 * @param [String] id of the table
 * @param [Integer] Number of items fetched in one request
 * @param [Object Instance] reference to the parent (context) object instance
 *
 * @return [void]
 */
function ManagedChildrenSelectOverview(urls, tableId, count, context) {
	var _this = this;

	this.mcs = new ManagedChildrenSelect(urls.dataUrl, tableId, count, null, "thOverview").init();
	this.urls = urls;
	this.table = this.mcs.table;
	this.context = context;

	this.table.select.style('api'); // Disable row selection
	this.mcs.loadData(0, this.setListeners.bind(this) );
}

/**
 * Update the Thesaurus selection, extends edit lock
 * @param [Object] has properties:
 		'action' [String] (add/remove),
		'context' [Instance] (calling object reference)
		'autoDeselect' [Boolean] optional
		'thisTable' [Boolean] optional
 * @param [DataTable Row(s) Data] data source
 * @param [Function] callback executed on request success
 *
 * @return [void]
 */
 ManagedChildrenSelectOverview.prototype.updateSelection = function (params, data, callback) {
	this.extendLock();
	this.mcs.processing(true, "Updating selection...");

	setTimeout(function(){ this.executeRequest(this.buildRequestParams(params, data), callback) }.bind(this), 0);
}

/**
 * Posts data to server, runs callbacks
 * @param [Object] request parameters, must contain:
 		url [String],
		data [Object] formatted for the request,
		request type [String]
		context [Instance] calling instance (optional)
 * @param [Function] callback executed on request success
 *
 * @return [void]
 */
ManagedChildrenSelectOverview.prototype.executeRequest = function (requestParams, callback) {
	$.ajax({
		url: requestParams.url,
		data: requestParams.data,
		type: requestParams.type,
		dataType: 'json',
		context: this,
		success: function(result){
			this.mcs.processing(false);
			try { callback() } catch(exc) {};
			try { requestParams.context.processing(false) } catch(exc) {};
		},
		error: function (xhr, status, error) {
			handleAjaxError(xhr, status, error);
			this.mcs.processing(false);
			try { requestParams.context.processing(false) } catch(exc) {};
		}
	})
}

/**
 * Builds ajax request parameters
 * @param [Object] has properties:
 		'action' [String] (add/remove),
		'context' [Instance] (calling object reference)
		'autoDeselect' [Boolean] optional
		'thisTable' [Boolean] optional
 * @param [DataTable Row(s) Data] data source
 *
 * @return [Object] formatted ajax request parameters required for the executeRequest function
 */
ManagedChildrenSelectOverview.prototype.buildRequestParams = function (params, data) {
	var requestData = {
		"data": this.encodeRequestData(data),
		"context": params.context,
	};

	switch(params.action) {
		case "add":
			requestData["type"] = "POST";
			requestData["url"] = this.urls.selectChildrenURL;
			break;
		case "remove":
			requestData["type"] = "PUT";

			if(data.count() == this.mcs.table.page.info().recordsTotal) {
				requestData["url"] = this.urls.deselectAllChildrenUrl;
				requestData["data"] = "";
			}
			else
				requestData["url"] = this.urls.deselectChildrenUrl;
			break;
	}

	return requestData;
}

/**
 * Encodes DataTables Row(s) Data API to correct data structure to be sent to the server
 *
 * @return [Object] formatted data structure (array of item ids)
 */
ManagedChildrenSelectOverview.prototype.encodeRequestData = function (data) {
	var idArray = [];

	$.each(data, function(i, item){
		idArray.push(item.id);
	});

	return {thesauri: {id_set: idArray}};
}

/**
 * Callback to successful server data selection update - updates the local UI
 * @param [Rows Data] original data from request
 * @param [Object] original request params
 *
 * @return [void]
 */
ManagedChildrenSelectOverview.prototype.updateSelectionCallback = function (data, params) {
	switch(params.action){
		case "add":
			this.addItems(data, params);
			break;
		case "remove":
			this.removeItems(data, params);
			break;
	}
}

/**
 * Adds item(s) to the Thesaurus selection (local UI callback)
 * @param [Rows Data] original data from request
 * @param [Object] original request params
 *
 * @return [void]
 */
ManagedChildrenSelectOverview.prototype.addItems = function (data, params) {
	$.each(data, function (i, e) {
		e["version"] = "Ver 1.2.3.";
		// Attach origin information for performance
		e["sourceInfo"] = {index: params.context.findRowByParam("id", e).index(), tableId: params.context.tableId};
	});

	this.table.rows.add(data);
	this.redraw();
}

/**
 * Removes item(s) to the Thesaurus selection (local UI callback)
 * @param [Rows Data] original data from request
 * @param [Object] original request params
 *
 * @return [void]
 */
ManagedChildrenSelectOverview.prototype.removeItems = function (data, params) {
	if (params.thisTable)
		params.rows.remove();
	else
		this.mcs.findRowsByData("id", data).remove();

	if (params.autoDeselect)
		this.context.autoDeselectAllTabs(data);

	this.table.draw();
}

/**
 * Removes (excludes) all items filtered by the table search in bulk, updates UI
 *
 * @return [void]
 */
ManagedChildrenSelectOverview.prototype.bulkRemove = function () {
	setTimeout(function () {
		var rows = this.mcs.findRowsByParam("rows_filter", {search: 'applied'});
		var params = { context: this, action: "remove", autoDeselect: true, thisTable: true, rows: rows };
		var data = rows.data();
		var callback = this.updateSelectionCallback.bind(this, data, params);
		this.updateSelection(params, data, callback);
	}.bind(this), 0);
}

/**
 * Sets the event listeners for: bulk-deselect, exclude buttons
 *
 * @return [void]
 */
ManagedChildrenSelectOverview.prototype.setListeners = function () {
	var _this = this;

	// Exclude all click event handler
	$(_this.mcs.tableId + "-bulk-deselect").off("click").on("click", function () {
		new ConfirmationDialog(_this.bulkRemove.bind(_this), {dangerous: true}).show();
	});

	// Exclude item button click event handler
	$(_this.mcs.tableId).find(".exclude").off("click").on("click", function ()  {
		var item = _this.table.rows($(this).parents("tr:first")).data();
		var origin = item[0].sourceInfo;

		// Saved origin information - more efficient access to the original row
		if (origin != null){
			$(origin.tableId).DataTable().row(origin.index).deselect();
		}

		// No origin information - have to automatically find and deselect origin row by id
		else {
			var params = { action: "remove", context: _this, autoDeselect: true };
			var callback = _this.updateSelectionCallback.bind(_this, item, params);
			_this.updateSelection(params, item, callback);
		}
	});
}

/**
 * Redraws the table, re-sets the listeners
 *
 * @return [void]
 */
ManagedChildrenSelectOverview.prototype.redraw = function () {
	this.mcs.redraw();
	this.setListeners();
}

/**
 * Extend lock call
 *
 * @return [void]
 */
ManagedChildrenSelectOverview.prototype.extendLock = function () {
 if(!this.context.timer.expired)
	 this.context.timer.extendLock();
}
