/*
* Edit Extension Panel
*
* Requires:
* extension_children_table [Table] the managed item table
*/

/**
 * Edit Extension Panel Constructor
 *
 * @return [void]
 */
function EditExtensionPanel(url, count, tc_id, callback) {
  var _this = this;
  this.callback = callback;
  this.url = url;
  this.tc_id = tc_id;
  this.count = count;

  this.init();
}

EditExtensionPanel.prototype.init = function(){
  this.childrenTable = $('#extension-children-table').DataTable( {
    "order": [[ 0, "desc" ]],
    "columns": this.columns(),
    "pageLength": pageLength, // Global setting
    "lengthMenu": pageSettings, // Global setting
    "processing": true,
    "language": {
      "infoFiltered": "",
      "emptyTable": "No child items.",
      "processing": generateSpinner("medium")
    }
  });
  this.loadData(0);
}

/**
 * Add item to table
 *
 * @param [Integer] the offset to retrieve
 * @return [void]
 */
EditExtensionPanel.prototype.loadData = function (offset) {
  this.processing(true);

  $.ajax({
    url: this.url,
    data: {"count": this.count, "offset": offset},
    type: 'GET',
    dataType: 'json',
    context: this,
    success: function(result) {
      for (i=0; i<result.data.length; i++) {
        var row = this.childrenTable.row.add(result.data[i]);
      }
      this.childrenTable.draw();

      if (result.count >= this.count)
        this.loadData(result.offset + this.count);
      else {
        this.processing(false);
        this.updateUI();
        this.setListeners();
      }
    },
    error: function(xhr,status,error){
      handleAjaxError(xhr, status, error);
      this.processing(false);
    }
  });

}

EditExtensionPanel.prototype.processing = function(enable){
  if(enable){
    this.childrenTable.processing(true);
    $("#edit-extension-actions").children().addClass("disabled");
  }
  else{
    this.childrenTable.processing(false);
    $("#edit-extension-actions").children().removeClass("disabled");
  }
}

/**
 * Refresh table
 *
 * @return [void]
 */
EditExtensionPanel.prototype.updateUI = function() {
  this.childrenTable.columns.adjust();

}


/**
 * Refresh table
 *
 * @return [void]
 */
EditExtensionPanel.prototype.refresh = function() {
  var _this = this;
  _this.childrenTable.clear();
  _this.loadData(0);
  _this.callback();
}

/**
 * Add New item to table
 *
 * @param ids [Array] the array with news id items
 * @return [void]
 */
EditExtensionPanel.prototype.addNew = function(ids) {
  var _this = this;
  $.ajax({
        url: "/thesauri/managed_concepts/"+_this.tc_id+"/extensions",
        type: "POST",
        data: JSON.stringify({managed_concept:{"extension_ids": ids} }),
        dataType: 'json',
        contentType: 'application/json',
        error: function (xhr, status, error) {
          displayError("An error has occurred.");
        },
        success: function(result) {
          $.each(result.error, function(i, e){
            displayError(this);
          });
          if (result.error.length == 0)
            _this.refresh();
        }
      });
}

/**
 * Delete item to table
 *
 * @param id [String] the id item to delete
 * @return [void]
 */
EditExtensionPanel.prototype.deleteExtension = function(id) {
  var _this = this;
  $.ajax({
        url: "/thesauri/managed_concepts/"+_this.tc_id+"/extensions",
        type: "DELETE",
        data: JSON.stringify({managed_concept:{"extension_ids": id} }),
        dataType: 'json',
        contentType: 'application/json',
        error: function (xhr, status, error) {
          displayError("An error has occurred.");
        },
        success: function(result) {
          _this.refresh();
        }
      });
}

EditExtensionPanel.prototype.synonymList = function(entry) {
  var items = [];
  $.each(entry.synonym, function(i, value) {
    items.push(value.label);
  });
  entry.synonym_list = items.join("; ");
}

EditExtensionPanel.prototype.linkButton = function (path, text) {
  if (path === "") {
    return "&nbsp;"
  } else {
    return '<a href="' + path + '" class="btn  btn-xs">' + text + '</a>';
  }
}

EditExtensionPanel.prototype.setListeners = function () {
  var _this = this;

  $("#extension-children-table .exclude").on('click', function () {
    new ConfirmationDialog(_this.deleteExtension.bind(_this, [$(this).attr("data-id")]),
      {subtitle: "", dangerous: true})
    .show();
  });
}

EditExtensionPanel.prototype.excludeBtnHTML = function (data) {
	return "<span class='icon-times text-accent-2 clickable text-small exclude ttip' data-id='"+data.id+"'>"+
            "<span class='ttip-text ttip-left shadow-small text-small text-medium'>"+
              "Exclude item"+
            "</span>"+
          "</span>";
}

EditExtensionPanel.prototype.editBtnHTML = function (data) {
	return "<span class='icon-edit text-link clickable text-small modify-properties ttip' data-id='"+data.id+"'>"+
            "<span class='ttip-text ttip-left shadow-small text-small text-medium'>"+
              "Edit item properties"+
            "</span>"+
          "</span>";
}

EditExtensionPanel.prototype.columns = function () {
	return [
    {"data" : "identifier"},
    {"data" : "notation"},
    {"data" : "preferred_term"},
    {"data" : "synonym"},
    {"data" : "definition"},
    {"data" : "tags", "render" : function (data, type, row, meta) {
      return (data == null ? data : colorCodeTagsBadge(data));
    }},
    {"render" : function (data, type, row, meta) {
      return "";
    }.bind(this)},
    {"render" : function (data, type, row, meta) {
      return (row.delete_path == "" ? "" : this.excludeBtnHTML(row));
    }.bind(this)}
  ];
}
