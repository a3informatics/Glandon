/*
* Edit Extension Panel
*
* Requires:
* extension_children_table [Table] the managed item table
*/

/**
 * Edit Extension Panel Constructor
 *
 * @param urls [Object] contains loadUrl, updateUrl, childUpdateUrl
 * @param extensionId [String] id of the currently edited extension (managed concept)
 * @param count [Integer] Number of items fetched in one request
 * @param callback [Function] Function to be called on extension edit
 * @return [void]
 */
function EditExtensionPanel(urls, extensionId, count, callback) {
  var _this = this;
  this.urls = urls;
  this.extensionId = extensionId;
  this.count = count;
  this.callback = callback;

  this.init();
  this.loadData(0);

  // Resize event
  $(window).resize(function(){ _this.childrenTable.columns.adjust() });
}

/**
 * Initializes the children DataTable
 *
 * @return [void]
 */
EditExtensionPanel.prototype.init = function(){
  this.childrenTable = $('#extension-children-table').DataTable( {
    "order": [[ 0, "desc" ]],
    "columns": this.columns(),
    "pageLength": pageLength, // Global setting
    "lengthMenu": pageSettings, // Global setting
    "paging": true,
    "processing": true,
    "language": {
      "infoFiltered": "",
      "emptyTable": "No child items.",
      "processing": generateSpinner("medium")
    }
  });
}

/**
 * Loads data into children table and handles UI update
 *
 * @param offset [Integer] the offset to retrieve
 * @return [void]
 */
EditExtensionPanel.prototype.loadData = function (offset) {
  this.processing(true);

  $.ajax({
    url: this.urls.loadUrl,
    data: {"count": this.count, "offset": offset},
    type: 'GET',
    dataType: 'json',
    context: this,
    success: function(result) {
      for (i=0; i<result.data.length; i++) {
        this.childrenTable.row.add(result.data[i]);
      }
      this.childrenTable.draw();

      if (result.count >= this.count)
        this.loadData(result.offset + this.count);
      else {
        this.processing(false);
        this.updateUI();
      }
    },
    error: function(xhr,status,error){
      handleAjaxError(xhr, status, error);
      this.processing(false);
    }
  });
}

/**
 * Update extension ajax call, refreshes table if callback not set
 *
 * @param params [Object] params containing: url, type, data
 * @param callback [Function] success callback (optional)
 * @return [void]
 */
EditExtensionPanel.prototype.updateExtension = function(params, callback) {
  this.processing(true);

  $.ajax({
    url: params.url,
    type: params.type,
    data: params.data,
    dataType: 'json',
    contentType: 'application/json',
    context: this,
    success: function(result) {
      this.processing(false);
      if(callback != null)
        callback(result);
      else
        this.refresh();
    },
    error: function(xhr,status,error){
      handleAjaxError(xhr, status, error);
      this.processing(false);
    }
  });
}

/**
 * Adds children items to the extension
 *
 * @param ids [Array] the array with news id items
 * @return [void]
 */
EditExtensionPanel.prototype.addToExtension = function(ids) {
  var params = {
    url: this.urls.updateUrl,
    type: "POST",
    data: JSON.stringify({managed_concept: {"extension_ids": ids}})
  }

  this.updateExtension(params, null);
}

/**
 * Delete child item from the extension
 *
 * @param id [String] the id of the item to remove
 * @return [void]
 */
EditExtensionPanel.prototype.removeFromExtension = function(id) {
  var params = {
    url: this.urls.updateUrl,
    type: "DELETE",
    data: JSON.stringify({managed_concept: {"extension_ids": id}})
  }

  this.updateExtension(params, null);
}

/**
 * Creates a new item as a child of the extension
 *
 * @return [void]
 */
EditExtensionPanel.prototype.newExtensionChild = function() {
  var params = {
    url: this.urls.newChildUrl,
    type: "POST",
    data: JSON.stringify({managed_concept: {identifier: "SERVERIDENTIFER"}})
  }

  this.updateExtension(params, null);
}

/**
 * Edit item properties handler
 *
 * @return [void]
 */
EditExtensionPanel.prototype.editItemProperties = function(tableRow) {
  tableRow.data()["parent_id"] = extensionId;
  var callback = function(item) { tableRow.data(item); this.updateUI(); }.bind(this);

  new EditProperties(tableRow.data(), "UnmanagedConcept", callback).show();
}

/**
 * Sets the event listeners and handlers in the panel
 *
 * @return [void]
 */
EditExtensionPanel.prototype.setListeners = function () {
  var _this = this;

  // Remove item from extension event
  $("#extension-children-table tbody").off('click', '.exclude').on('click', '.exclude', function() {
    new ConfirmationDialog(
      _this.removeFromExtension.bind(_this, [$(this).attr("data-id")]),
      {subtitle: "", dangerous: true})
    .show();
  });

  // New child item in extension event
  $("#new-item-button").off('click').on('click', this.newExtensionChild.bind(this));

  // Edit item properties event
  $("#extension-children-table tbody").off('click', '.update-properties').on('click', ".update-properties", function(){
    _this.editItemProperties(_this.findRowByParam("id", {id: $(this).attr("data-id")}));
  });
}

/**
 * Enables / Disables processing on the panel
 *
 * @param enable [Boolean] processing enable/disable ~ true/false
 * @return [void]
 */
EditExtensionPanel.prototype.processing = function(enable){
  if(enable){
    this.childrenTable.processing(true);
    $("#edit-extension-actions").children().addClass("disabled");
  }
  else{
    this.childrenTable.processing(false);
    $("#edit-extension-actions").children().removeClass("disabled");
  }
}

/**
 * Updates panel UI
 *
 * @return [void]
 */
EditExtensionPanel.prototype.updateUI = function() {
  this.childrenTable.columns.adjust();
  this.childrenTable.draw();
  this.setListeners();
}

/**
 * Refresh table
 *
 * @return [void]
 */
EditExtensionPanel.prototype.refresh = function() {
  var _this = this;
  _this.childrenTable.clear();
  _this.loadData(0);
  _this.callback();
}

/**
 * Finds a row in a DataTable based on data
 *
 * @param dataType [String] DataType by which to search, e.g. id
 * @param data [Object] Data value object which to compare
 * @return [DatatTable Row] DataTable Row result api instance (can be empty)
 */
EditExtensionPanel.prototype.findRowByParam = function (dataType, data) {
	return this.childrenTable.row(function (idx, dt, node) {
		return dt[dataType] == data[dataType] ? true : false;
	});
}

/**
 * Generates the HTML for exlude button of a child item
 *
 * @param data [Object] item data object
 * @return [String] Formatted HTML with id as data-id attribute
 */
EditExtensionPanel.prototype.excludeBtnHTML = function (data) {
	return "<span class='icon-times text-accent-2 clickable text-small exclude ttip' data-id='"+data.id+"'>"+
            "<span class='ttip-text ttip-left shadow-small text-small text-medium'>"+
              "Exclude item"+
            "</span>"+
          "</span>";
}

/**
 * Generates the HTML for edit button of a child item
 *
 * @param data [Object] item data object
 * @return [String] Formatted HTML with id as data-id attribute
 */
EditExtensionPanel.prototype.editBtnHTML = function (data) {
	return "<span class='icon-edit text-link clickable text-small update-properties ttip' data-id='"+data.id+"'>"+
            "<span class='ttip-text ttip-left shadow-small text-small text-medium'>"+
              "Edit item properties"+
            "</span>"+
          "</span>";
}

/**
 * Table columns
 *
 * @return [Array] Object of column definitions
 */
EditExtensionPanel.prototype.columns = function () {
	return [
    {"data" : "identifier"},
    {"data" : "notation"},
    {"data" : "preferred_term"},
    {"data" : "synonym"},
    {"data" : "definition"},
    {"data" : "tags", "render" : function (data, type, row, meta) {
      return (data == null ? data : colorCodeTagsBadge(data));
    }},
    {"render" : function (data, type, row, meta) {
      return (row.delete ? this.editBtnHTML(row) : "");
    }.bind(this)},
    {"render" : function (data, type, row, meta) {
      return (row.delete ? this.excludeBtnHTML(row) : "");
    }.bind(this)}
  ];
}
