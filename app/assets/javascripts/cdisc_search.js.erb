var csSearchTable;
var csOffset;
var csLimit;
  
$(document).ready( function() {
	
	jQuery.fn.dataTable.Api.register( 'processing()', function ( show ) {
    return this.iterator( 'table', function ( ctx ) {
        ctx.oApi._fnProcessingDisplay( ctx, show );
    } );
  });

  var counter = document.getElementById("notepadAdd")
  var termId = document.getElementById("termId");
  var namespace = document.getElementById("namespace");
  var more;
  var currentRef;
  var currentRow;

  more = true;
  csOffset = 1;
  csLimit = 1000;
  currentRef = null;
  currentRow = null;
  
  csSearchTable = $('#search2Table').DataTable({
    "columns": [
      {"data" : "parentIdentifier", "width" : "10%"},
      {"data" : "identifier", "width" : "10%"},
      {"data" : "notation", "width" : "10%"},
      {"data" : "definition", "width" : "35%"},
      {"data" : "synonym", "width" : "15%"},
      {"data" : "preferredTerm", "width" : "15%"},
      {"data" : "extensible", "width" : "5%"}
    ],
    "pageLength": pageLength,
    "lengthMenu": pageSettings,
    "processing": true,
    "language": {
      "processing": "<img src='<%= asset_path('processing.gif') %>'>"
    }
  });

  csSearchTable.processing(true);
  next();

  // Setup - add a text input to each footer cell
  $('#search2Table tfoot th').each( function () {
      var title = $(this).text();
      if (title == "Extensible") {
        $(this).html("");
      } else if (title == "Definition") {
        $(this).html( '<input type="text" class="form-control" size="20" placeholder="Search ..." />' );
      } else {
        $(this).html( '<input type="text" class="form-control" size="10" placeholder="Search ..." />' );
      }
  } );
 
  // Apply the search
  csSearchTable.columns().every( function () {
    var that = this;
    $( 'input', this.footer() ).on( 'keyup change', function () {
      if (that.search() !== this.value) {
        that
          .search( this.value )
          .draw();
      }
    });
  });

  // Handle click on terminology table
  $('#search2Table tbody').on('click', 'tr', function () {
    if (currentRef != null) {
      $(currentRef).toggleClass('success');
    }
    $(this).toggleClass('success');

    // Get the row
    var row = csSearchTable.row(this).index();
    var data = csSearchTable.row(row).data();

    // Save the selection
    currentRef = this;
    currentRow = row;
  });

  $('#notepadAdd').click(function() {
    if (currentRef != null) {
      var row = csSearchTable.row(currentRef).index();
      var data = csSearchTable.row(row).data();
      if (data.identifier == data.parentIdentifier) {
        displayWarning("You need to select an item not a code list.");
      } else {
        $.ajax({
          url: "../notepads/create_term",
          type: 'POST',
          data: { "notepad": {"item_id": data.id, "item_ns": namespace.value }},
          success: function(result){
            var count = result['count'];
            counter.innerHTML = 'Notepad+ <span class="badge">' + count + '</span>'
          },
          error: function(xhr, status, error){
            handleAjaxError(xhr, status, error);
          }
        });
      }
    } else {
      displayWarning("You need to select an item.");
    }
  });

});

/**
 * Show all items in the search table. 
 * Really only for testing purposes.
 *
 * @return [Null] 
 */
function csSearchTableAll() {
  csSearchTable.page.len(-1).draw();
}

// Get the next block of data for the table
function next() {
  $.ajax({
    url: "next",
    data: { "id": termId.value, "namespace": namespace.value, "offset": csOffset, "limit": csLimit },
    type: 'GET',
    dataType: 'json',
    success: function(result){
      var data = result['data'];
      csOffset = result['offset'];
      csLimit = result['limit'];
      more = result['more'];
      var i;
      for (i=0; i<data.length; i++) {
        var row = data[i]
        csSearchTable.row.add(row);
      }
      csSearchTable.draw();
      if (more) {
        next();
      } else {
        csSearchTable.processing(false);
      }
    },
    error: function(xhr,status,error){
      handleAjaxError(xhr, status, error);
    }
  });    
}