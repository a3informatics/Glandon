$(document).ready(function() {
  
  var PT_BC_ID_COL = 0;
  var PT_PROP_ID_COL = 1;
  var PT_ALIAS_COL = 2;
  var PT_QTEXT_COL = 3;
  var PT_PTEXT_COL = 4;
  var PT_ENABLED_COL = 5;
  var PT_COLLECT_COL = 6;
  var PT_DATATYPE_COL = 7;
  var PT_FORMAT_COL = 8;
  var PT_TERM_COL = 9;

  var html;
  var newItem;
  var newItemInput;
  var editItem;
  var editItemInput;

  var bcInfo;     // BC source structure json structure
  var bcInstances;  // Array of BC instances being created
  var bcCount;      // Count of BCs created
  var bcTable;      // Main BC table
  var bcTableCell;  // Current BC table cell
  var bcTableCI;    // Current BC tbale column index
  var bcTableRI;    // Current BC table row index
  var bcTextInput ; // BC text input
  var bcColAttributeMap;
    
  var notepadTable;       // Notepad table
  var notepadTableReload; // Notepad reload table flag
  var notepadData;        // Current notepad row data
  var notepadRow;         // Current notepad table row
  
  var clData;        // Current notepad row data
  var clRow;         // Current notepad table row
  
  var propertyTable;            
  var propertyTableCell;
  var propertyTableCI;
  var propertyTableRI;
  var propertytextInput;
  var propertyColAttributeMap;

  var clTable;  // Code list table
  
  // Set table column to attribute name map
  bcColAttributeMap = ['bcId', 'identifier', 'label'];
  propertyColAttributeMap = ['bcId', 'alias', 'qText', 'pText', 'enabled', 'collect', 'datatype', 'format', 'values'];

  // Set up remainder of data
  bcInstances = [];
  bcCount = 0;
  propertyTableCell = null;
  bcTableCell = null;
  notepadTableReload = false;
  notepadData = null;
  notePadRow = null;
  clData = null;
  clRow = null;
  propertyTableCI = null;
  propertyTableRI = null;
  bcTableCI = null;
  bcTableRI = null;
  propertytextInput = document.getElementById("pText");
  bcTextInput = document.getElementById("bcText");
  
  // Set the flags
  editItemInput = document.getElementById("edit_item");
  editItem = (editItemInput.value === 'true');

  // Initialise the tables
  bcTable = $('#bc_table').DataTable({
    "columns": [
      {"data" : "bcId", "width" : "4%"},
      {"data" : "identifier", "width" : "30%"},
      {"data" : "label", "width" : "65%"}
    ]
  });

  propertyTable = $('#property_table').DataTable({
    "pageLength": 10,
    "lengthMenu": [[5, 10, 15, 20, 25], [5, 10, 15, 20, 25]],
    "columns": [
      {"data" : "bcId", "width" : "5%"},
      {"data" : "propId", "width" : "5%"},
      {"data" : "alias", "width" : "15%"},
      {"data" : "qText", "width" : "15%"},
      {"data" : "pText", "width" : "20%"},
      {"data" : "enabled", "width" : "5%"},
      {"data" : "collect", "width" : "5%"},
      {"data" : "datatype", "width" : "5%"},
      {"data" : "format", "width" : "5%"},
      {"data" : "term", "width" : "20%"}
    ]
  });
  
  clTable = $('#cl_table').DataTable({
    "searching": false,
    "pageLength": 5,
    "lengthMenu": [[5, 10, 15, 20, 25], [5, 10, 15, 20, 25]],
    "bInfo" : false,
    "columns": [
      {"data" : "identifier", "width" : "30%"},
      {"data" : "useful_1", "width" : "70%"}
    ]
  });

  initialNotepadLoad();
  
  // Get the BCT json data definition
  html = $("#bcJson").html();
  bcInfo = $.parseJSON(html);
  opType = bcInfo.operation
  if (opType === "BC_NEW" || opType === "BCT_NEW") {
    newItem = true;
  } else {
    newItem = false;
  }
  if (editItem) {
    propertyTableAddBC(bcInfo,1); 
  }
  
  // Hide panels
  bcTextHide ();
  propertyTextHide ();
  propertyClHide ()
  propertyNotepadHide ()
  
  // ... and process, remainder is event driven.

  /* 
  * FUNCTIONS & EVENTS
  * ==================
  */

  function initialNotepadLoad () {
    notepadTable = $('#notepad_table').DataTable( {
      "ajax": {
        "url": "/notepads/index_term",
        "dataSrc": "data"  
      },
      "bProcessing": true,
      "bInfo" : false,
      "searching": false,
      "pageLength": 5,
      "lengthMenu": [[5, 10, 15, 20, 25], [5, 10, 15, 20, 25]],
      "language": {
             "processing": "<img src='<%= asset_path('processing.gif') %>'>"
        },
      "columns": [
        {"data" : "identifier", "width" : "30%"},
        {"data" : "useful_1", "width" : "70%"}
      ]
    });
    notepadTableReload = true;    
  }

  $('#notepad_refresh').click(function() {
    if (!notepadTableReload) {
      initialNotepadLoad();
    } else {
      notepadTable.ajax.reload();
    }
  });

  $('#notepad_add').click(function() {
    var data;
    var text;
    if (propertyTableCell != null) {
      if (propertyTableCI === PT_TERM_COL) {
        text = propertyTableCell.html();
        propertyTableCell.html(addClItemText(text, notepadData.useful_1, notepadData.identifier));
        clTable.row.add(notepadData);
        clTable.draw(false);
        data = propertyTable.row(propertyTableRI).data();
        addPropertyValue(data.bcId-1, data.key, notepadData); 
      }
    }
  });

  $('#bc_add').click(function() {
    addBC(bcInfo);
  });

  $('#bc_delete').click(function() {
    var html = alertWarning("Function not implemented yet.");
    displayAlerts(html);
  });
  
  $('#bc_save').click(function() {
    var addId;
    var url;
    var method;
    var data;
    var bc;
    var bcInstance;
    var i;
    if (newItem) {
      url = "/biomedical_concepts";
      method = 'POST';
      addId = false;
    } else {
      url = "/biomedical_concepts/";
      method = 'PUT';
      addId = true;
    }
    bcCount = 0;
    bcTable.clear();
    propertyTable.clear();
    for (i=0; i<bcInstances.length; i++) {
      bcInstance = bcInstances[i];
      bc = bcInstance['source']
      if (addId) {
        url = url + bc['id']
        data = { "instance": i, "namespace": bc['namespace'], "data": bcInstance };  
      } else {
        data = { "data": bcInstance };  
      }
      $.ajax({
        url: url,
        type: method,
        data: data,
        success: function(result){
          var html = alertSuccess("Biomedical Concept has been saved.");
          displayAlerts(html);
          newItem = false;
          var instance = result['instance']
          addBC(result['data']);
        },
        error: function(xhr,status,error){
          handleAjaxError (xhr, status, error)
        }
      }); 
    }
  });

  $('#cl_delete').click(function() {
    var rowData;
    var i;
    var item;
    var text;
    var bcIndex;
    var propertyKey;
    var bc;
    var properties;
    var property;
    var values;

    if (clRow != null) {
      clTable.row(clRow).remove();
      clRow = null;
      clTable.draw();
    }
    text = "";
    data = propertyTable.row(propertyTableRI).data();
    bcIndex = data.bcId - 1;
    propertyKey = data.key;
    bc = bcInstances[bcIndex];
    properties = bc.properties;
    property = properties[propertyKey]
    values = property.values;
    values = [];
    rowData = clTable.rows().data();
    for (i=0; i<rowData.length; i++) {
      item = rowData.row(i).data();
      addPropertyValue(bcIndex, propertyKey, item); 
      text = addClItemText(text, item.useful_1, item.identifier);
    }
    property.term = text;
    propertyTableCell.html(text);
  });
  
  $('#notepad_table tbody').on('click', 'tr', function () {
    var row = notepadTable.row(this).index();
    var data = notepadTable.row(row).data();
    if (notepadRow != null) {
      $(notepadRow).toggleClass('success');
    }
    $(this).toggleClass('success')
    notepadData = data;
    notepadRow = this
  });

  $('#cl_table tbody').on('click', 'tr', function () {
    var row = clTable.row(this).index();
    var data = clTable.row(row).data();
    if (clRow != null) {
      $(clRow).toggleClass('success');
    }
    $(this).toggleClass('success')
    clData = data;
    clRow = this
  });

  $('#bc_update_text').click(function() {
    if (bcTableCell != null) {
      bcTableCell.html(bcTextInput.value);
      setBcAttribute(bcTableRI, bcColAttributeMap[bcTableCI], bcTextInput.value);
    }
  });

  $('#property_update_text').click(function() {
    if (propertyTableCell != null) {
      propertyTableCell.html(propertytextInput.value);
    }
  });

  $('#bcText').keyup(function (e) {
    if (e.keyCode == 13) {
      if (bcTableCell != null) {
        bcTableCell.html(bcTextInput.value);
        //setBcIdentifier(bcTableRI, bcTextInput.value);
        var rows = $('#bc_table tbody tr').length;
        if (bcTableRI < (rows - 1)) {
          bcTableCell.toggleClass('success');
          bcTableRI += 1;
          bcTableCell = bcGetCell();
          bcTableCell.toggleClass('success');
        }
      }
    }
  });

  $('#pText').keyup(function (e) {
    if (e.keyCode == 13) {
      if (propertyTableCell != null) {
        propertyTableCell.html(propertytextInput.value);
        var data = propertyTable.row(propertyTableRI).data();
        attribute = propertyColAttributeMap[propertyTableCI];
        setPropertyAttribute(data.bcId-1, data.key, attribute, propertytextInput.value)
        var rows = $('#property_table tbody tr').length;
        if (propertyTableRI < (rows - 1)) {
          propertyTableCell.toggleClass('success');
          propertyTableRI += 1;
          propertyTableCell = propertyGetCell();
          propertyTableCell.toggleClass('success');
        }
      }
    }
  });

  $('#bc_table tbody').on('click', 'td', function () {
    bcTableCI = parseInt($(this).index());
    var tr = $(this).closest('tr');
    var row = bcTable.row(tr).index();
    var data = bcTable.row(row).data();
    bcTableRI = tr.index();
    if (bcTableCell != null) {
      bcTableCell.toggleClass('success');
    }
    if (bcTableCI == 0) {
      bcTextHide ();
      bcTableCell = null;        
    } else if (bcTableCI == 1) {
      if (!editItem) {
        bcTextShow ();
        bcTableCell = bcGetCell();
        bcTableCell.toggleClass('success');
        bcTextInput.focus();
      } else {
        bcTextHide ();
        bcTableCell = null;  
      }
    } else if (bcTableCI == 2) {
      bcTextShow ();
      bcTableCell = bcGetCell();
      bcTableCell.toggleClass('success');
      bcTextInput.focus();
    }      
  });

  $('#property_table tbody').on('click', 'td', function () {
    propertyTableCI = parseInt($(this).index());
    var tr = $(this).closest('tr');
    var row = propertyTable.row(tr).index();
    var data = propertyTable.row(row).data();
    var bcIndex = data.bcId - 1;
    var bcPropertyKey = data.key;
    propertyTableRI = tr.index();
    if (propertyTableCell != null) {
      propertyTableCell.toggleClass('success');
    }
    if (propertyTableCI === PT_BC_ID_COL || propertyTableCI === PT_PROP_ID_COL || propertyTableCI === PT_ALIAS_COL || propertyTableCI === PT_DATATYPE_COL) {
      propertyHideAll() ;
      propertyTableCell = null;        
    } else if (propertyTableCI == PT_ENABLED_COL || propertyTableCI == PT_COLLECT_COL) {
      propertyHideAll() ;
      propertyTableCell = propertyGetCell();
      attribute = propertyColAttributeMap[propertyTableCI];
      if (propertyTableCell.html() === "true") {
        propertyTableCell.html("false");
        setPropertyAttribute(data.bcId-1, data.key, attribute, "false")
      } else {
        propertyTableCell.html("true");        
        setPropertyAttribute(data.bcId-1, data.key, attribute, "true")
      }
      propertyTableCell = null;    
    } else if (propertyTableCI === PT_FORMAT_COL) {
      var bc = bcInstances[bcIndex];
      var properties = bc['properties'];
      var property = properties[bcPropertyKey]
      if (property['datatype'] === "F" || property['datatype'] === "I") {
        propertyTextShow ();
        propertyClHide ();
        propertyNotepadHide ();
        propertyTableCell = propertyGetCell();
        propertyTableCell.toggleClass('success');
        propertytextInput.focus();  
      } else {
        propertyTextHide ();
        propertyClHide ();
        propertyNotepadHide ();
        propertyTableCell = null;   
      }
    } else if (propertyTableCI === PT_TERM_COL) {
      propertyClShow ();
      propertyNotepadShow ();
      propertyTextHide ();
      propertyTableCell = propertyGetCell();
      propertyTableCell.toggleClass('success');
      clTable.clear();
      var values = getPropertyValues(bcIndex, bcPropertyKey)
      for (var i=0; i<values.length; i++) {
        var item = values[i]
        clTable.row.add(item); 
      }
      clTable.draw(false);
    } else {
      propertyTextShow ();
      propertyClHide ();
      propertyNotepadHide ();
      propertyTableCell = propertyGetCell();
      propertyTableCell.toggleClass('success');
      propertytextInput.focus();
    }      
  });

  function bcGetCell() {
    var $tr = $('#bc_table tbody').find('tr:nth-child(' + (bcTableRI+1) + ')');
    var $td = $tr.find('td:nth-child(' + (bcTableCI+1) + ')');
    return $td
  }

    function propertyGetCell() {
    var $tr = $('#property_table tbody').find('tr:nth-child(' + (propertyTableRI+1) + ')');
    var $td = $tr.find('td:nth-child(' + (propertyTableCI+1) + ')');
    return $td
  }

  function propertyHideAll() {
    propertyTextHide ();
    propertyClHide ();
    propertyNotepadHide ();
  }

  function propertyClHide () {
    $('#cl_property_panel').hide();
  }

  function propertyClShow () {
    $('#cl_property_panel').show();
  }

  function propertyTextHide () {
    $('#text_property_panel').hide();
  }
  
  function propertyTextShow () {
    $('#text_property_panel').show();
  }
  
  function propertyNotepadHide () {
    $('#notepad_panel').hide();
  }
  
  function propertyNotepadShow () {
    $('#notepad_panel').show();
  }

  function bcTextHide () {
    $('#text_bc_panel').hide();
  }
  
  function bcTextShow () {
    $('#text_bc_panel').show();
  }
  
  function setBcAttribute (bcIndex, attribute, text) {
    var entry = bcInstances[bcIndex];
    var bc = entry['source'];
    bc[attribute] = text;
  }

  function setPropertyAttribute(bcIndex, property, attribute, text) {
    var bc = bcInstances[bcIndex];
    var ps = bc['properties'];
    var p = ps[property]
    p[attribute] = text;
  }
  
  function getPropertyAttribute(bcIndex, property, attribute) {
    var bc = bcInstances[bcIndex];
    var ps = bc['properties'];
    var p = ps[property]
    return p[attribute];
  }

  function addPropertyValue(bcIndex, property, data) {
    var bc = bcInstances[bcIndex];
    var properties = bc['properties'];
    var property = properties[property]
    var values = property['values'];
    values.push(data);
  }

  function getPropertyValues(bcIndex, property) {
    var bc = bcInstances[bcIndex];
    var properties = bc['properties'];
    var property = properties[property]
    return property['values'];
  }

  function addBC(bcSource) {
    var bcData;
    bcCount += 1;
    bcData = bcSource['source'];
    bcData['bcId'] = bcCount;
    bcData['identifier'] = "Biomedical Concept No. " + bcCount;
    bcTable.row.add(bcData);
    bcTable.draw(false);
    propertyTableAddBC(bcSource, bcCount);
  }
  
  function propertyTableAddBC(bcSourceXXX, count) {
    var i;
    var text;
    var properties;
    var property;
    var values;
    var value;
    var index;
    index = 1;
    properties = bcSourceXXX['properties'];
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        property = properties[key];
        property['bcId'] = parseInt(count);
        property['propId'] = parseInt(index);
        index += 1;
        values = property['values'];
        text = "";
        for (i=0; i<values.length; i++) {
          value = values[i]
          text = addClItemText(text,value['useful_1'], value.identifier);  // Note both styles of access (intended, an experiment).
        }
        property['term'] = text;
        property['key'] = key;
        propertyTable.row.add(property);
      }
    }
    bcInstances.push(bcSourceXXX); // Odd place to put this, probably better in addBC
    propertyTable.draw(false);  
  }

  function addClItemText(existing, notation, identifier) {
    var text;
    text = existing === "" ? "" : existing + '<br/>';
    text = text + notation + ' [' + identifier + ']';
    return text;    
  }

  /*
  * Not used but useful if going to use checkboxes
  */
  /*$.fn.dataTable.ext.order['dom-checkbox'] = function  ( settings, col )
  {
    return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
      return $('input', td).prop('checked') ? '1' : '0';
    } );
  }*/



/*
var i;
    var rowData;
    var item;
    var rows;

    node.qText = qTextId.value;
    node.pText = pTextId.value;
    node.collect = collectId.checked;
    node.enable = enableId.checked;
    rowData = bcClDataTable.rows().data();
    node.cli = [];
    for (i=0; i<rowData.length; i++) {
      item = rowData.row(i).data();
      if (typeof item != 'undefined') {
        node.cli.push(item);
      }
    }
*/



});