# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'capybara/RSpec'
require 'cucumber/rails'
require 'capybara/cucumber'
require 'capybara-screenshot'
require 'capybara-screenshot/cucumber'
require 'allure-cucumber'
require 'rspec/expectations'
require 'rspec'
require 'base64'
require 'selenium-webdriver'

Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}

 #TURN_ON_SCREEN_SHOT=false
 TURN_ON_SCREEN_SHOT=true

 TYPE ='Expected'

#RemoteServerHelpers.switch_to_remote
RemoteServerHelpers.switch_to_local

Capybara::Screenshot.autosave_on_failure = false
Capybara::Screenshot.append_timestamp = false
Capybara.default_driver = :selenium_chrome

# Keep only the screenshots generated from the last failing test suite
#Capybara::Screenshot.prune_strategy = :keep_last_run

# Keep up to the number of screenshots specified in the hash
#Capybara::Screenshot.prune_strategy = { keep: 2}

#root='/Users/Kirsten/Documents/rails/Glandon'

if TYPE == 'Actual' 
    Capybara::save_path = "./cucumber-report/screenshots/actual/"
    # Clean out the screenshot folder before run
     FileUtils.rm_rf(Dir[Capybara::save_path])
else
  Capybara::save_path = "./cucumber-report/screenshots/expected/"
  # Clean out the screenshot folder before run
    FileUtils.rm_rf(Dir[Capybara::save_path])
end

def zoom_in
  page.execute_script("document.body.style.zoom='100%'")
end

def zoom_out
  page.execute_script("document.body.style.zoom='75%'")
end

def save_screen(e_or_a,screen_shot_enabled=TURN_ON_SCREEN_SHOT)

  if screen_shot_enabled
     Capybara.current_session.current_window.maximize
     zoom_out
     screenshot_file_name = "#{Time.now.strftime("#{e_or_a}_%d_%m_%Y__%H_%M_%S")}.png" 
     save_screenshot(screenshot_file_name, :full => true)
     screenshot_path = Capybara::save_path+screenshot_file_name
     attach(File.open(screenshot_path), "image/png")
     #attach(screenshot_path, "image/png")
     zoom_in
    end
end


# module Capybara
#   module DSL
#     def my_screenshot_and_save_page(screenshot_name)
#       Capybara::Screenshot.my_screenshot_and_save_page(screenshot_name)
#     end
#   end
# end

# module Capybara
#   module Screenshot
#     def self.my_screenshot_and_save_page(screenshot_name)
#       saver = new_saver(Capybara, Capybara.page, true, screenshot_name)
#       if saver.save
#         {:html => saver.html_path, :image => saver.screenshot_path}
#       end
#     end
#   end
# end

#Run after each scenario

# AfterStep do |step|
#   #screenshot_file_name = TYPE+step.name.gsub(' ', '-').gsub(/^.*\/spec\//,'')+'.png'
#   screenshot_file_name = TYPE+"#{Time.now.strftime("_%d_%m_%Y_%H_%M_%S")}.png"
#   save_screenshot(screenshot_file_name,:full => true)
#   screenshot_path = 'cucumber-report/screenshots/expected/'+screenshot_file_name
#   #screenshot = Base64.encode64(screenshot_path)
#   image = open(screenshot_path, 'rb', &:read)
#   encoded_image = Base64.encode64(image)
#   attach(encoded_image, "image/png;base64")
#     log(screenshot_path)
# end

# After do |scenario|
#   screenshot_file_name = TYPE+'_'+scenario.name.gsub(' ', '-').gsub(/^.*\/spec\//,'')+'.png'
#   save_screenshot(screenshot_file_name,:full => true)
#   screenshot_path = './cucumber-report/screenshots/expected/'+screenshot_file_name
#   #screenshot = Base64.encode64(screenshot_path)
#   # image = open(screenshot_path, 'rb', &:read)
#   # encoded_image = Base64.encode64(image)
#   # attach(encoded_image, "image/png;base64")
#   attach(screenshot_path,'image/png')
# end

# AllureCucumber.configure do |config|
# # config.results_directory = "/cucumber-report"
#   config.clean_results_directory = true
#   config.logging_level = Logger::INFO
#   # these are used for creating links to bugs or test cases where {} is replaced with keys of relevant items
#   config.link_tms_pattern = "http://www.jira.com/browse/{}"
#   config.link_issue_pattern = "http://www.jira.com/browse/{}"
# end

# frozen_string_literal: true

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
DatabaseCleaner.strategy = :transaction
rescue NameError
raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
 Cucumber::Rails::Database.javascript_strategy = :truncation




 
